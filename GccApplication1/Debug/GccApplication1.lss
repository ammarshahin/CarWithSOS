
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002396  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00002396  0000242a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003c  00800084  00800084  0000244e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000244e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002480  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000460  00000000  00000000  000024bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a27  00000000  00000000  0000291c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000114c  00000000  00000000  00005343  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002770  00000000  00000000  0000648f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001060  00000000  00000000  00008c00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001669  00000000  00000000  00009c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021d1  00000000  00000000  0000b2c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000368  00000000  00000000  0000d49a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 0d 04 	jmp	0x81a	; 0x81a <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f3 0e 	jmp	0x1de6	; 0x1de6 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 82 04 	jmp	0x904	; 0x904 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e9       	ldi	r30, 0x96	; 150
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3c       	cpi	r26, 0xC0	; 192
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c3 00 	call	0x186	; 0x186 <main>
      8a:	0c 94 c9 11 	jmp	0x2392	; 0x2392 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Car_Init>:
 * Function : Car_Init
 * Description: This function is to initialize the car 
 *  it Don't take any thing and returns nothing
 */
void Car_Init(void)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	DC_Motor_Init(DC_MOTOR_CHANNEL_0);
      9a:	80 e0       	ldi	r24, 0x00	; 0
      9c:	0e 94 de 00 	call	0x1bc	; 0x1bc <DC_Motor_Init>
	DC_Motor_Init(DC_MOTOR_CHANNEL_1);
      a0:	81 e0       	ldi	r24, 0x01	; 1
      a2:	0e 94 de 00 	call	0x1bc	; 0x1bc <DC_Motor_Init>
	DC_Motor_Start(DC_MOTOR_CHANNEL_0);
      a6:	80 e0       	ldi	r24, 0x00	; 0
      a8:	0e 94 87 01 	call	0x30e	; 0x30e <DC_Motor_Start>
	DC_Motor_Start(DC_MOTOR_CHANNEL_1);
      ac:	81 e0       	ldi	r24, 0x01	; 1
      ae:	0e 94 87 01 	call	0x30e	; 0x30e <DC_Motor_Start>
}
      b2:	00 00       	nop
      b4:	df 91       	pop	r29
      b6:	cf 91       	pop	r28
      b8:	08 95       	ret

000000ba <Car_Action>:
 * Function : Car_Action
 * Description: This function is to Implement the car logic 
 *  it Don't take any thing and returns nothing
 */
void Car_Action(void)
{	
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
      be:	cd b7       	in	r28, 0x3d	; 61
      c0:	de b7       	in	r29, 0x3e	; 62
	if(pushButton_Get_Status(PUSH_BUTTON0)) /* No obstacle Go Forward */
      c2:	80 e1       	ldi	r24, 0x10	; 16
      c4:	0e 94 64 03 	call	0x6c8	; 0x6c8 <pushButton_Get_Status>
      c8:	88 23       	and	r24, r24
      ca:	11 f0       	breq	.+4      	; 0xd0 <Car_Action+0x16>
	{
		Move_Forward();
      cc:	0e 94 73 00 	call	0xe6	; 0xe6 <Move_Forward>
	}
	
	if (pushButton_Get_Status(PUSH_BUTTON1))  /* Obstacle on the near range */
      d0:	84 e0       	ldi	r24, 0x04	; 4
      d2:	0e 94 64 03 	call	0x6c8	; 0x6c8 <pushButton_Get_Status>
      d6:	88 23       	and	r24, r24
      d8:	11 f0       	breq	.+4      	; 0xde <Car_Action+0x24>
	{
		Move_Backward();
      da:	0e 94 83 00 	call	0x106	; 0x106 <Move_Backward>
	}
      de:	00 00       	nop
      e0:	df 91       	pop	r29
      e2:	cf 91       	pop	r28
      e4:	08 95       	ret

000000e6 <Move_Forward>:
 * Description: This function is to make car move forward
 *  it take nothing and returns nothing
 */

void Move_Forward(void)
{
      e6:	cf 93       	push	r28
      e8:	df 93       	push	r29
      ea:	cd b7       	in	r28, 0x3d	; 61
      ec:	de b7       	in	r29, 0x3e	; 62
	DC_Motor_Set_Direction(DC_MOTOR_CHANNEL_0, DC_MOTOR_FORWARD);
      ee:	61 e0       	ldi	r22, 0x01	; 1
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	0e 94 34 01 	call	0x268	; 0x268 <DC_Motor_Set_Direction>
	DC_Motor_Set_Direction(DC_MOTOR_CHANNEL_1, DC_MOTOR_FORWARD);
      f6:	61 e0       	ldi	r22, 0x01	; 1
      f8:	81 e0       	ldi	r24, 0x01	; 1
      fa:	0e 94 34 01 	call	0x268	; 0x268 <DC_Motor_Set_Direction>
}
      fe:	00 00       	nop
     100:	df 91       	pop	r29
     102:	cf 91       	pop	r28
     104:	08 95       	ret

00000106 <Move_Backward>:
 * Function : Move_Backward
 * Description: This function is to make car move Backward
 *  it take nothing and returns nothing
 */
void Move_Backward(void)
{
     106:	cf 93       	push	r28
     108:	df 93       	push	r29
     10a:	cd b7       	in	r28, 0x3d	; 61
     10c:	de b7       	in	r29, 0x3e	; 62
	DC_Motor_Set_Direction(DC_MOTOR_CHANNEL_0, DC_MOTOR_BACK);
     10e:	60 e0       	ldi	r22, 0x00	; 0
     110:	80 e0       	ldi	r24, 0x00	; 0
     112:	0e 94 34 01 	call	0x268	; 0x268 <DC_Motor_Set_Direction>
	DC_Motor_Set_Direction(DC_MOTOR_CHANNEL_1, DC_MOTOR_BACK);
     116:	60 e0       	ldi	r22, 0x00	; 0
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	0e 94 34 01 	call	0x268	; 0x268 <DC_Motor_Set_Direction>
}
     11e:	00 00       	nop
     120:	df 91       	pop	r29
     122:	cf 91       	pop	r28
     124:	08 95       	ret

00000126 <SystemInit_Task>:

/* Task: SystemInit_Task 
 * Description : This task is to initialize the System [LCD and PushButton]
 * it takes 5 Systicks and deletes it self afterward */
void SystemInit_Task(void)
{
     126:	cf 93       	push	r28
     128:	df 93       	push	r29
     12a:	cd b7       	in	r28, 0x3d	; 61
     12c:	de b7       	in	r29, 0x3e	; 62
	static uint8 CounterFinishInit = INITIAL_ZERO;
	LCD_Init();
     12e:	0e 94 17 02 	call	0x42e	; 0x42e <LCD_Init>
	pushButton_Init();
     132:	0e 94 52 03 	call	0x6a4	; 0x6a4 <pushButton_Init>
	Car_Init();
     136:	0e 94 49 00 	call	0x92	; 0x92 <Car_Init>
	Ultrasonic_Init();
     13a:	0e 94 9c 04 	call	0x938	; 0x938 <Ultrasonic_Init>
	CounterFinishInit++;
     13e:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <CounterFinishInit.1716>
     142:	8f 5f       	subi	r24, 0xFF	; 255
     144:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <CounterFinishInit.1716>
	
	if (CounterFinishInit == SYSTEM_FINISH_INITIALIZATION )
     148:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <CounterFinishInit.1716>
     14c:	84 30       	cpi	r24, 0x04	; 4
     14e:	39 f4       	brne	.+14     	; 0x15e <SystemInit_Task+0x38>
	{
		SysStatus = SystemInitialized;
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__data_end>
		Sos_Delete_Task(SystemInit_Task);
     156:	83 e9       	ldi	r24, 0x93	; 147
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	0e 94 7e 07 	call	0xefc	; 0xefc <Sos_Delete_Task>
	}
	else
	{
		// Do Nothing
	}
}
     15e:	00 00       	nop
     160:	df 91       	pop	r29
     162:	cf 91       	pop	r28
     164:	08 95       	ret

00000166 <PushButtonAndLCD_Task>:


/* Task: PushButtonAndLCD_Task           
 * Description : This task is to Test the PushButton and the LCD by Showing the number of times the Switch is pressed*/
void PushButtonAndLCD_Task(void)
{	
     166:	cf 93       	push	r28
     168:	df 93       	push	r29
     16a:	cd b7       	in	r28, 0x3d	; 61
     16c:	de b7       	in	r29, 0x3e	; 62
	if( SystemInitialized == SysStatus )
     16e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__data_end>
     172:	81 30       	cpi	r24, 0x01	; 1
     174:	21 f4       	brne	.+8      	; 0x17e <PushButtonAndLCD_Task+0x18>
	{	
			Car_Action();
     176:	0e 94 5d 00 	call	0xba	; 0xba <Car_Action>
			Ultrasonic_Display();
     17a:	0e 94 27 05 	call	0xa4e	; 0xa4e <Ultrasonic_Display>
	else
	{
		// Do Nothing
	}
	
}
     17e:	00 00       	nop
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	08 95       	ret

00000186 <main>:

/************************************************************************/
/*                          Main Function                               */
/************************************************************************/
int main(void)
{
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	cd b7       	in	r28, 0x3d	; 61
     18c:	de b7       	in	r29, 0x3e	; 62
	/* Init the OS Scheduler */
	Sos_Init();	
     18e:	0e 94 71 05 	call	0xae2	; 0xae2 <Sos_Init>
	
	/* Create the System Tasks */
	Sos_Create_Task(SystemInit_Task,TASK_SYSINIT_PRIORITY,TASK_SYSINIT_PERIODICITY);
     192:	42 e0       	ldi	r20, 0x02	; 2
     194:	50 e0       	ldi	r21, 0x00	; 0
     196:	65 e0       	ldi	r22, 0x05	; 5
     198:	83 e9       	ldi	r24, 0x93	; 147
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <Sos_Create_Task>
	Sos_Create_Task(PushButtonAndLCD_Task,TASK_PBAndLCD_PRIORITY,TASK_PBAndLCD_PERIODICITY);
     1a0:	44 e6       	ldi	r20, 0x64	; 100
     1a2:	50 e0       	ldi	r21, 0x00	; 0
     1a4:	63 e0       	ldi	r22, 0x03	; 3
     1a6:	83 eb       	ldi	r24, 0xB3	; 179
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <Sos_Create_Task>
		
	/* Start the OS */
	Sos_Run();
     1ae:	0e 94 85 06 	call	0xd0a	; 0xd0a <Sos_Run>
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	df 91       	pop	r29
     1b8:	cf 91       	pop	r28
     1ba:	08 95       	ret

000001bc <DC_Motor_Init>:
		Gpio_PinWrite(DC_MOTOR_CHANNEL_1_PORT,DC_MOTOR_CHANNEL_1_PIN_2,LOW);
		break;
		default:
		break;	
	}		
}
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	1f 92       	push	r1
     1c2:	cd b7       	in	r28, 0x3d	; 61
     1c4:	de b7       	in	r29, 0x3e	; 62
     1c6:	89 83       	std	Y+1, r24	; 0x01
     1c8:	82 e0       	ldi	r24, 0x02	; 2
     1ca:	0e 94 18 0b 	call	0x1630	; 0x1630 <PWM_Init>
     1ce:	80 e5       	ldi	r24, 0x50	; 80
     1d0:	0e 94 4a 0b 	call	0x1694	; 0x1694 <PWM_PhaseCorrect>
     1d4:	89 81       	ldd	r24, Y+1	; 0x01
     1d6:	88 2f       	mov	r24, r24
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	00 97       	sbiw	r24, 0x00	; 0
     1dc:	19 f0       	breq	.+6      	; 0x1e4 <DC_Motor_Init+0x28>
     1de:	01 97       	sbiw	r24, 0x01	; 1
     1e0:	b1 f0       	breq	.+44     	; 0x20e <DC_Motor_Init+0x52>
     1e2:	2a c0       	rjmp	.+84     	; 0x238 <DC_Motor_Init+0x7c>
     1e4:	4f ef       	ldi	r20, 0xFF	; 255
     1e6:	61 e0       	ldi	r22, 0x01	; 1
     1e8:	82 e0       	ldi	r24, 0x02	; 2
     1ea:	0e 94 29 08 	call	0x1052	; 0x1052 <Gpio_PinDirection>
     1ee:	4f ef       	ldi	r20, 0xFF	; 255
     1f0:	64 e0       	ldi	r22, 0x04	; 4
     1f2:	82 e0       	ldi	r24, 0x02	; 2
     1f4:	0e 94 29 08 	call	0x1052	; 0x1052 <Gpio_PinDirection>
     1f8:	40 e0       	ldi	r20, 0x00	; 0
     1fa:	61 e0       	ldi	r22, 0x01	; 1
     1fc:	82 e0       	ldi	r24, 0x02	; 2
     1fe:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     202:	40 e0       	ldi	r20, 0x00	; 0
     204:	64 e0       	ldi	r22, 0x04	; 4
     206:	82 e0       	ldi	r24, 0x02	; 2
     208:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     20c:	15 c0       	rjmp	.+42     	; 0x238 <DC_Motor_Init+0x7c>
     20e:	4f ef       	ldi	r20, 0xFF	; 255
     210:	62 e0       	ldi	r22, 0x02	; 2
     212:	82 e0       	ldi	r24, 0x02	; 2
     214:	0e 94 29 08 	call	0x1052	; 0x1052 <Gpio_PinDirection>
     218:	4f ef       	ldi	r20, 0xFF	; 255
     21a:	68 e0       	ldi	r22, 0x08	; 8
     21c:	82 e0       	ldi	r24, 0x02	; 2
     21e:	0e 94 29 08 	call	0x1052	; 0x1052 <Gpio_PinDirection>
     222:	40 e0       	ldi	r20, 0x00	; 0
     224:	62 e0       	ldi	r22, 0x02	; 2
     226:	82 e0       	ldi	r24, 0x02	; 2
     228:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     22c:	40 e0       	ldi	r20, 0x00	; 0
     22e:	68 e0       	ldi	r22, 0x08	; 8
     230:	82 e0       	ldi	r24, 0x02	; 2
     232:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     236:	00 00       	nop
     238:	00 00       	nop
     23a:	0f 90       	pop	r0
     23c:	df 91       	pop	r29
     23e:	cf 91       	pop	r28
     240:	08 95       	ret

00000242 <DC_Motor_Set_Speed>:
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	1f 92       	push	r1
     248:	cd b7       	in	r28, 0x3d	; 61
     24a:	de b7       	in	r29, 0x3e	; 62
     24c:	89 83       	std	Y+1, r24	; 0x01
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	85 36       	cpi	r24, 0x65	; 101
     252:	28 f4       	brcc	.+10     	; 0x25e <DC_Motor_Set_Speed+0x1c>
     254:	89 81       	ldd	r24, Y+1	; 0x01
     256:	0e 94 4a 0b 	call	0x1694	; 0x1694 <PWM_PhaseCorrect>
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	01 c0       	rjmp	.+2      	; 0x260 <DC_Motor_Set_Speed+0x1e>
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	0f 90       	pop	r0
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	08 95       	ret

00000268 <DC_Motor_Set_Direction>:
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
     26c:	00 d0       	rcall	.+0      	; 0x26e <DC_Motor_Set_Direction+0x6>
     26e:	cd b7       	in	r28, 0x3d	; 61
     270:	de b7       	in	r29, 0x3e	; 62
     272:	89 83       	std	Y+1, r24	; 0x01
     274:	6a 83       	std	Y+2, r22	; 0x02
     276:	89 81       	ldd	r24, Y+1	; 0x01
     278:	88 2f       	mov	r24, r24
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	00 97       	sbiw	r24, 0x00	; 0
     27e:	19 f0       	breq	.+6      	; 0x286 <DC_Motor_Set_Direction+0x1e>
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	01 f1       	breq	.+64     	; 0x2c4 <DC_Motor_Set_Direction+0x5c>
     284:	3e c0       	rjmp	.+124    	; 0x302 <DC_Motor_Set_Direction+0x9a>
     286:	8a 81       	ldd	r24, Y+2	; 0x02
     288:	88 2f       	mov	r24, r24
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	00 97       	sbiw	r24, 0x00	; 0
     28e:	71 f0       	breq	.+28     	; 0x2ac <DC_Motor_Set_Direction+0x44>
     290:	01 97       	sbiw	r24, 0x01	; 1
     292:	09 f0       	breq	.+2      	; 0x296 <DC_Motor_Set_Direction+0x2e>
     294:	16 c0       	rjmp	.+44     	; 0x2c2 <DC_Motor_Set_Direction+0x5a>
     296:	41 e0       	ldi	r20, 0x01	; 1
     298:	61 e0       	ldi	r22, 0x01	; 1
     29a:	82 e0       	ldi	r24, 0x02	; 2
     29c:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     2a0:	40 e0       	ldi	r20, 0x00	; 0
     2a2:	64 e0       	ldi	r22, 0x04	; 4
     2a4:	82 e0       	ldi	r24, 0x02	; 2
     2a6:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     2aa:	0b c0       	rjmp	.+22     	; 0x2c2 <DC_Motor_Set_Direction+0x5a>
     2ac:	40 e0       	ldi	r20, 0x00	; 0
     2ae:	61 e0       	ldi	r22, 0x01	; 1
     2b0:	82 e0       	ldi	r24, 0x02	; 2
     2b2:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     2b6:	41 e0       	ldi	r20, 0x01	; 1
     2b8:	64 e0       	ldi	r22, 0x04	; 4
     2ba:	82 e0       	ldi	r24, 0x02	; 2
     2bc:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     2c0:	00 00       	nop
     2c2:	1f c0       	rjmp	.+62     	; 0x302 <DC_Motor_Set_Direction+0x9a>
     2c4:	8a 81       	ldd	r24, Y+2	; 0x02
     2c6:	88 2f       	mov	r24, r24
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	00 97       	sbiw	r24, 0x00	; 0
     2cc:	71 f0       	breq	.+28     	; 0x2ea <DC_Motor_Set_Direction+0x82>
     2ce:	01 97       	sbiw	r24, 0x01	; 1
     2d0:	09 f0       	breq	.+2      	; 0x2d4 <DC_Motor_Set_Direction+0x6c>
     2d2:	16 c0       	rjmp	.+44     	; 0x300 <DC_Motor_Set_Direction+0x98>
     2d4:	41 e0       	ldi	r20, 0x01	; 1
     2d6:	62 e0       	ldi	r22, 0x02	; 2
     2d8:	82 e0       	ldi	r24, 0x02	; 2
     2da:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     2de:	40 e0       	ldi	r20, 0x00	; 0
     2e0:	68 e0       	ldi	r22, 0x08	; 8
     2e2:	82 e0       	ldi	r24, 0x02	; 2
     2e4:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     2e8:	0b c0       	rjmp	.+22     	; 0x300 <DC_Motor_Set_Direction+0x98>
     2ea:	40 e0       	ldi	r20, 0x00	; 0
     2ec:	62 e0       	ldi	r22, 0x02	; 2
     2ee:	82 e0       	ldi	r24, 0x02	; 2
     2f0:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     2f4:	41 e0       	ldi	r20, 0x01	; 1
     2f6:	68 e0       	ldi	r22, 0x08	; 8
     2f8:	82 e0       	ldi	r24, 0x02	; 2
     2fa:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     2fe:	00 00       	nop
     300:	00 00       	nop
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	0f 90       	pop	r0
     306:	0f 90       	pop	r0
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	08 95       	ret

0000030e <DC_Motor_Start>:
 * Description : This function is used to Start the motor Channel.
 * @pram  Channel : Set the Channel of the motor.
 * Return : the function Returns Nothing.
 */
void DC_Motor_Start(uint8 Channel)
{
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	1f 92       	push	r1
     314:	cd b7       	in	r28, 0x3d	; 61
     316:	de b7       	in	r29, 0x3e	; 62
     318:	89 83       	std	Y+1, r24	; 0x01
	DC_Motor_Set_Speed(DEFAULT_SPEED);
     31a:	80 e5       	ldi	r24, 0x50	; 80
     31c:	0e 94 21 01 	call	0x242	; 0x242 <DC_Motor_Set_Speed>
	DC_Motor_Set_Direction(Channel,DC_MOTOR_FORWARD); // Move Forward as A default Direction
     320:	61 e0       	ldi	r22, 0x01	; 1
     322:	89 81       	ldd	r24, Y+1	; 0x01
     324:	0e 94 34 01 	call	0x268	; 0x268 <DC_Motor_Set_Direction>
     328:	00 00       	nop
     32a:	0f 90       	pop	r0
     32c:	df 91       	pop	r29
     32e:	cf 91       	pop	r28
     330:	08 95       	ret

00000332 <LCD_SendCommand>:
		}
		else
		{
			LCD_DisplayChar(Number+NUMBER_TO_CHAR_FACTOR);
		}
}
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	1f 92       	push	r1
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
     33c:	89 83       	std	Y+1, r24	; 0x01
     33e:	40 e0       	ldi	r20, 0x00	; 0
     340:	62 e0       	ldi	r22, 0x02	; 2
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     348:	40 e0       	ldi	r20, 0x00	; 0
     34a:	64 e0       	ldi	r22, 0x04	; 4
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     352:	89 81       	ldd	r24, Y+1	; 0x01
     354:	88 1f       	adc	r24, r24
     356:	88 27       	eor	r24, r24
     358:	88 1f       	adc	r24, r24
     35a:	48 2f       	mov	r20, r24
     35c:	60 e8       	ldi	r22, 0x80	; 128
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     364:	89 81       	ldd	r24, Y+1	; 0x01
     366:	82 95       	swap	r24
     368:	86 95       	lsr	r24
     36a:	86 95       	lsr	r24
     36c:	83 70       	andi	r24, 0x03	; 3
     36e:	81 70       	andi	r24, 0x01	; 1
     370:	48 2f       	mov	r20, r24
     372:	60 e4       	ldi	r22, 0x40	; 64
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     37a:	89 81       	ldd	r24, Y+1	; 0x01
     37c:	82 95       	swap	r24
     37e:	86 95       	lsr	r24
     380:	87 70       	andi	r24, 0x07	; 7
     382:	81 70       	andi	r24, 0x01	; 1
     384:	48 2f       	mov	r20, r24
     386:	60 e2       	ldi	r22, 0x20	; 32
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     38e:	89 81       	ldd	r24, Y+1	; 0x01
     390:	82 95       	swap	r24
     392:	8f 70       	andi	r24, 0x0F	; 15
     394:	81 70       	andi	r24, 0x01	; 1
     396:	48 2f       	mov	r20, r24
     398:	60 e1       	ldi	r22, 0x10	; 16
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     3a0:	41 e0       	ldi	r20, 0x01	; 1
     3a2:	68 e0       	ldi	r22, 0x08	; 8
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     3aa:	64 e1       	ldi	r22, 0x14	; 20
     3ac:	70 e0       	ldi	r23, 0x00	; 0
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <SwDelay_us>
     3b6:	40 e0       	ldi	r20, 0x00	; 0
     3b8:	68 e0       	ldi	r22, 0x08	; 8
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     3c0:	89 81       	ldd	r24, Y+1	; 0x01
     3c2:	86 95       	lsr	r24
     3c4:	86 95       	lsr	r24
     3c6:	86 95       	lsr	r24
     3c8:	81 70       	andi	r24, 0x01	; 1
     3ca:	48 2f       	mov	r20, r24
     3cc:	60 e8       	ldi	r22, 0x80	; 128
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     3d4:	89 81       	ldd	r24, Y+1	; 0x01
     3d6:	86 95       	lsr	r24
     3d8:	86 95       	lsr	r24
     3da:	81 70       	andi	r24, 0x01	; 1
     3dc:	48 2f       	mov	r20, r24
     3de:	60 e4       	ldi	r22, 0x40	; 64
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     3e6:	89 81       	ldd	r24, Y+1	; 0x01
     3e8:	86 95       	lsr	r24
     3ea:	81 70       	andi	r24, 0x01	; 1
     3ec:	48 2f       	mov	r20, r24
     3ee:	60 e2       	ldi	r22, 0x20	; 32
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     3f6:	89 81       	ldd	r24, Y+1	; 0x01
     3f8:	81 70       	andi	r24, 0x01	; 1
     3fa:	48 2f       	mov	r20, r24
     3fc:	60 e1       	ldi	r22, 0x10	; 16
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     404:	41 e0       	ldi	r20, 0x01	; 1
     406:	68 e0       	ldi	r22, 0x08	; 8
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     40e:	64 e1       	ldi	r22, 0x14	; 20
     410:	70 e0       	ldi	r23, 0x00	; 0
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <SwDelay_us>
     41a:	40 e0       	ldi	r20, 0x00	; 0
     41c:	68 e0       	ldi	r22, 0x08	; 8
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     424:	00 00       	nop
     426:	0f 90       	pop	r0
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	08 95       	ret

0000042e <LCD_Init>:
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	1f 92       	push	r1
     434:	cd b7       	in	r28, 0x3d	; 61
     436:	de b7       	in	r29, 0x3e	; 62
     438:	19 82       	std	Y+1, r1	; 0x01
     43a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <InitState>
     43e:	88 23       	and	r24, r24
     440:	09 f0       	breq	.+2      	; 0x444 <LCD_Init+0x16>
     442:	42 c0       	rjmp	.+132    	; 0x4c8 <LCD_Init+0x9a>
     444:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <StateCounter.1680>
     448:	88 2f       	mov	r24, r24
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	81 30       	cpi	r24, 0x01	; 1
     44e:	91 05       	cpc	r25, r1
     450:	c9 f0       	breq	.+50     	; 0x484 <LCD_Init+0x56>
     452:	82 30       	cpi	r24, 0x02	; 2
     454:	91 05       	cpc	r25, r1
     456:	1c f4       	brge	.+6      	; 0x45e <LCD_Init+0x30>
     458:	89 2b       	or	r24, r25
     45a:	39 f0       	breq	.+14     	; 0x46a <LCD_Init+0x3c>
     45c:	31 c0       	rjmp	.+98     	; 0x4c0 <LCD_Init+0x92>
     45e:	82 30       	cpi	r24, 0x02	; 2
     460:	91 05       	cpc	r25, r1
     462:	c9 f0       	breq	.+50     	; 0x496 <LCD_Init+0x68>
     464:	03 97       	sbiw	r24, 0x03	; 3
     466:	01 f1       	breq	.+64     	; 0x4a8 <LCD_Init+0x7a>
     468:	2b c0       	rjmp	.+86     	; 0x4c0 <LCD_Init+0x92>
     46a:	6f ef       	ldi	r22, 0xFF	; 255
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <Gpio_PortDirection>
     472:	82 e0       	ldi	r24, 0x02	; 2
     474:	0e 94 99 01 	call	0x332	; 0x332 <LCD_SendCommand>
     478:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <StateCounter.1680>
     47c:	8f 5f       	subi	r24, 0xFF	; 255
     47e:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <StateCounter.1680>
     482:	24 c0       	rjmp	.+72     	; 0x4cc <LCD_Init+0x9e>
     484:	88 e2       	ldi	r24, 0x28	; 40
     486:	0e 94 99 01 	call	0x332	; 0x332 <LCD_SendCommand>
     48a:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <StateCounter.1680>
     48e:	8f 5f       	subi	r24, 0xFF	; 255
     490:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <StateCounter.1680>
     494:	1b c0       	rjmp	.+54     	; 0x4cc <LCD_Init+0x9e>
     496:	8e e0       	ldi	r24, 0x0E	; 14
     498:	0e 94 99 01 	call	0x332	; 0x332 <LCD_SendCommand>
     49c:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <StateCounter.1680>
     4a0:	8f 5f       	subi	r24, 0xFF	; 255
     4a2:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <StateCounter.1680>
     4a6:	12 c0       	rjmp	.+36     	; 0x4cc <LCD_Init+0x9e>
     4a8:	86 e0       	ldi	r24, 0x06	; 6
     4aa:	0e 94 99 01 	call	0x332	; 0x332 <LCD_SendCommand>
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <InitState>
     4b4:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <StateCounter.1680>
     4b8:	8f 5f       	subi	r24, 0xFF	; 255
     4ba:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <StateCounter.1680>
     4be:	06 c0       	rjmp	.+12     	; 0x4cc <LCD_Init+0x9e>
     4c0:	82 e0       	ldi	r24, 0x02	; 2
     4c2:	89 83       	std	Y+1, r24	; 0x01
     4c4:	00 00       	nop
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <LCD_Init+0x9e>
     4c8:	83 e0       	ldi	r24, 0x03	; 3
     4ca:	89 83       	std	Y+1, r24	; 0x01
     4cc:	89 81       	ldd	r24, Y+1	; 0x01
     4ce:	0f 90       	pop	r0
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	08 95       	ret

000004d6 <LCD_DisplayChar>:
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	1f 92       	push	r1
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
     4e0:	89 83       	std	Y+1, r24	; 0x01
     4e2:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <InitState>
     4e6:	81 30       	cpi	r24, 0x01	; 1
     4e8:	09 f0       	breq	.+2      	; 0x4ec <LCD_DisplayChar+0x16>
     4ea:	73 c0       	rjmp	.+230    	; 0x5d2 <LCD_DisplayChar+0xfc>
     4ec:	41 e0       	ldi	r20, 0x01	; 1
     4ee:	62 e0       	ldi	r22, 0x02	; 2
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	64 e0       	ldi	r22, 0x04	; 4
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     500:	89 81       	ldd	r24, Y+1	; 0x01
     502:	88 1f       	adc	r24, r24
     504:	88 27       	eor	r24, r24
     506:	88 1f       	adc	r24, r24
     508:	48 2f       	mov	r20, r24
     50a:	60 e8       	ldi	r22, 0x80	; 128
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     512:	89 81       	ldd	r24, Y+1	; 0x01
     514:	82 95       	swap	r24
     516:	86 95       	lsr	r24
     518:	86 95       	lsr	r24
     51a:	83 70       	andi	r24, 0x03	; 3
     51c:	81 70       	andi	r24, 0x01	; 1
     51e:	48 2f       	mov	r20, r24
     520:	60 e4       	ldi	r22, 0x40	; 64
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	82 95       	swap	r24
     52c:	86 95       	lsr	r24
     52e:	87 70       	andi	r24, 0x07	; 7
     530:	81 70       	andi	r24, 0x01	; 1
     532:	48 2f       	mov	r20, r24
     534:	60 e2       	ldi	r22, 0x20	; 32
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     53c:	89 81       	ldd	r24, Y+1	; 0x01
     53e:	82 95       	swap	r24
     540:	8f 70       	andi	r24, 0x0F	; 15
     542:	81 70       	andi	r24, 0x01	; 1
     544:	48 2f       	mov	r20, r24
     546:	60 e1       	ldi	r22, 0x10	; 16
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     54e:	41 e0       	ldi	r20, 0x01	; 1
     550:	68 e0       	ldi	r22, 0x08	; 8
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     558:	64 e1       	ldi	r22, 0x14	; 20
     55a:	70 e0       	ldi	r23, 0x00	; 0
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <SwDelay_us>
     564:	40 e0       	ldi	r20, 0x00	; 0
     566:	68 e0       	ldi	r22, 0x08	; 8
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     56e:	89 81       	ldd	r24, Y+1	; 0x01
     570:	86 95       	lsr	r24
     572:	86 95       	lsr	r24
     574:	86 95       	lsr	r24
     576:	81 70       	andi	r24, 0x01	; 1
     578:	48 2f       	mov	r20, r24
     57a:	60 e8       	ldi	r22, 0x80	; 128
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     582:	89 81       	ldd	r24, Y+1	; 0x01
     584:	86 95       	lsr	r24
     586:	86 95       	lsr	r24
     588:	81 70       	andi	r24, 0x01	; 1
     58a:	48 2f       	mov	r20, r24
     58c:	60 e4       	ldi	r22, 0x40	; 64
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     594:	89 81       	ldd	r24, Y+1	; 0x01
     596:	86 95       	lsr	r24
     598:	81 70       	andi	r24, 0x01	; 1
     59a:	48 2f       	mov	r20, r24
     59c:	60 e2       	ldi	r22, 0x20	; 32
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     5a4:	89 81       	ldd	r24, Y+1	; 0x01
     5a6:	81 70       	andi	r24, 0x01	; 1
     5a8:	48 2f       	mov	r20, r24
     5aa:	60 e1       	ldi	r22, 0x10	; 16
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     5b2:	41 e0       	ldi	r20, 0x01	; 1
     5b4:	68 e0       	ldi	r22, 0x08	; 8
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     5bc:	64 e1       	ldi	r22, 0x14	; 20
     5be:	70 e0       	ldi	r23, 0x00	; 0
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <SwDelay_us>
     5c8:	40 e0       	ldi	r20, 0x00	; 0
     5ca:	68 e0       	ldi	r22, 0x08	; 8
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
     5d2:	00 00       	nop
     5d4:	0f 90       	pop	r0
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	08 95       	ret

000005dc <LCD_DisplayString>:
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	00 d0       	rcall	.+0      	; 0x5e2 <LCD_DisplayString+0x6>
     5e2:	cd b7       	in	r28, 0x3d	; 61
     5e4:	de b7       	in	r29, 0x3e	; 62
     5e6:	9a 83       	std	Y+2, r25	; 0x02
     5e8:	89 83       	std	Y+1, r24	; 0x01
     5ea:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <InitState>
     5ee:	81 30       	cpi	r24, 0x01	; 1
     5f0:	81 f5       	brne	.+96     	; 0x652 <LCD_DisplayString+0x76>
     5f2:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <index.1693>
     5f6:	88 2f       	mov	r24, r24
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	29 81       	ldd	r18, Y+1	; 0x01
     5fc:	3a 81       	ldd	r19, Y+2	; 0x02
     5fe:	82 0f       	add	r24, r18
     600:	93 1f       	adc	r25, r19
     602:	fc 01       	movw	r30, r24
     604:	80 81       	ld	r24, Z
     606:	88 23       	and	r24, r24
     608:	f1 f0       	breq	.+60     	; 0x646 <LCD_DisplayString+0x6a>
     60a:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <y.1695>
     60e:	91 e0       	ldi	r25, 0x01	; 1
     610:	98 0f       	add	r25, r24
     612:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <y.1695>
     616:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <x.1694>
     61a:	68 2f       	mov	r22, r24
     61c:	89 2f       	mov	r24, r25
     61e:	0e 94 3a 03 	call	0x674	; 0x674 <LCD_GotoRowColumn>
     622:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <index.1693>
     626:	88 2f       	mov	r24, r24
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	29 81       	ldd	r18, Y+1	; 0x01
     62c:	3a 81       	ldd	r19, Y+2	; 0x02
     62e:	82 0f       	add	r24, r18
     630:	93 1f       	adc	r25, r19
     632:	fc 01       	movw	r30, r24
     634:	80 81       	ld	r24, Z
     636:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <LCD_DisplayChar>
     63a:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <index.1693>
     63e:	8f 5f       	subi	r24, 0xFF	; 255
     640:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <index.1693>
     644:	06 c0       	rjmp	.+12     	; 0x652 <LCD_DisplayString+0x76>
     646:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <index.1693>
     64a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <x.1694>
     64e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <y.1695>
     652:	00 00       	nop
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	08 95       	ret

0000065e <LCD_Clear>:
 * Function : LCD_GotoRowColumn
 * Description: this function is to Clear the LCD
 * @return void                        
 */
void LCD_Clear(void)
{
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	cd b7       	in	r28, 0x3d	; 61
     664:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(LCD_ClearScreen);
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	0e 94 99 01 	call	0x332	; 0x332 <LCD_SendCommand>
}
     66c:	00 00       	nop
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	08 95       	ret

00000674 <LCD_GotoRowColumn>:
 * param row: the row of the cursor should range is [0 to 1]
 * param col: the column of the cursor should range is [0 to 15]
 * @return void                                                          
 */
void LCD_GotoRowColumn(uint8 row , uint8 col)
{
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	00 d0       	rcall	.+0      	; 0x67a <LCD_GotoRowColumn+0x6>
     67a:	cd b7       	in	r28, 0x3d	; 61
     67c:	de b7       	in	r29, 0x3e	; 62
     67e:	89 83       	std	Y+1, r24	; 0x01
     680:	6a 83       	std	Y+2, r22	; 0x02
	LCD_SendCommand( (GOTO_ROW_COL_MASK1) | ( col + (GOTO_ROW_COL_MASK2 * row ) ) );
     682:	89 81       	ldd	r24, Y+1	; 0x01
     684:	98 2f       	mov	r25, r24
     686:	92 95       	swap	r25
     688:	99 0f       	add	r25, r25
     68a:	99 0f       	add	r25, r25
     68c:	90 7c       	andi	r25, 0xC0	; 192
     68e:	8a 81       	ldd	r24, Y+2	; 0x02
     690:	89 0f       	add	r24, r25
     692:	80 68       	ori	r24, 0x80	; 128
     694:	0e 94 99 01 	call	0x332	; 0x332 <LCD_SendCommand>
}
     698:	00 00       	nop
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	08 95       	ret

000006a4 <pushButton_Init>:
/**
 * Description: Function to Initiate the Push Button.
 * @param push_Button the number of the pushButton [PUSH_BUTTON0,PUSH_BUTTON1]
 */
void pushButton_Init()
{
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	cd b7       	in	r28, 0x3d	; 61
     6aa:	de b7       	in	r29, 0x3e	; 62
	Gpio_PinDirection(PUSH_BUTTON0_PORT,PUSH_BUTTON0_PIN,SET_IN);
     6ac:	40 e0       	ldi	r20, 0x00	; 0
     6ae:	64 e0       	ldi	r22, 0x04	; 4
     6b0:	82 e0       	ldi	r24, 0x02	; 2
     6b2:	0e 94 29 08 	call	0x1052	; 0x1052 <Gpio_PinDirection>
	Gpio_PinDirection(PUSH_BUTTON1_PORT,PUSH_BUTTON1_PIN,SET_IN);
     6b6:	40 e0       	ldi	r20, 0x00	; 0
     6b8:	62 e0       	ldi	r22, 0x02	; 2
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	0e 94 29 08 	call	0x1052	; 0x1052 <Gpio_PinDirection>
}
     6c0:	00 00       	nop
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	08 95       	ret

000006c8 <pushButton_Get_Status>:
 * Description: Function to get the status of the Push button(Value).
 * @param push_Button the number of the push button [PUSH_BUTTON0,PUSH_BUTTON1]
 * @return the value(state) of the push button
 */
uint8 pushButton_Get_Status(pushButton push_Button)
{
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	00 d0       	rcall	.+0      	; 0x6ce <pushButton_Get_Status+0x6>
     6ce:	cd b7       	in	r28, 0x3d	; 61
     6d0:	de b7       	in	r29, 0x3e	; 62
     6d2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 PB_FinalState = INITIAL_ZERO;
     6d4:	19 82       	std	Y+1, r1	; 0x01
	static uint8 PB0_CheckCounter = INITIAL_ZERO, PB1_CheckCounter = INITIAL_ZERO;
	static uint8 PB0_State0 = INITIAL_ZERO, PB0_State1 = INITIAL_ZERO;
	static uint8 PB1_State0 = INITIAL_ZERO, PB1_State1 = INITIAL_ZERO;
	switch(push_Button)
     6d6:	8a 81       	ldd	r24, Y+2	; 0x02
     6d8:	88 2f       	mov	r24, r24
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	84 30       	cpi	r24, 0x04	; 4
     6de:	91 05       	cpc	r25, r1
     6e0:	89 f1       	breq	.+98     	; 0x744 <pushButton_Get_Status+0x7c>
     6e2:	40 97       	sbiw	r24, 0x10	; 16
     6e4:	09 f0       	breq	.+2      	; 0x6e8 <pushButton_Get_Status+0x20>
				default:
				break;
			}
			break;
		default:
			break;
     6e6:	5a c0       	rjmp	.+180    	; 0x79c <pushButton_Get_Status+0xd4>
	static uint8 PB0_State0 = INITIAL_ZERO, PB0_State1 = INITIAL_ZERO;
	static uint8 PB1_State0 = INITIAL_ZERO, PB1_State1 = INITIAL_ZERO;
	switch(push_Button)
	{
		case PUSH_BUTTON0 :
			switch(PB0_CheckCounter)
     6e8:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <PB0_CheckCounter.1662>
     6ec:	88 2f       	mov	r24, r24
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	00 97       	sbiw	r24, 0x00	; 0
     6f2:	19 f0       	breq	.+6      	; 0x6fa <pushButton_Get_Status+0x32>
     6f4:	01 97       	sbiw	r24, 0x01	; 1
     6f6:	69 f0       	breq	.+26     	; 0x712 <pushButton_Get_Status+0x4a>
						PB_FinalState = INITIAL_ZERO;
					}
					PB0_CheckCounter = INITIAL_ZERO;
					break;
				default:
					break;
     6f8:	24 c0       	rjmp	.+72     	; 0x742 <pushButton_Get_Status+0x7a>
	{
		case PUSH_BUTTON0 :
			switch(PB0_CheckCounter)
			{
				case INITIAL_ZERO:
					PB0_State0 = Gpio_PinRead(PUSH_BUTTON0_PORT,PUSH_BUTTON0_PIN);
     6fa:	64 e0       	ldi	r22, 0x04	; 4
     6fc:	82 e0       	ldi	r24, 0x02	; 2
     6fe:	0e 94 74 09 	call	0x12e8	; 0x12e8 <Gpio_PinRead>
     702:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <PB0_State0.1664>
					PB0_CheckCounter++;
     706:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <PB0_CheckCounter.1662>
     70a:	8f 5f       	subi	r24, 0xFF	; 255
     70c:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <PB0_CheckCounter.1662>
					break;
     710:	18 c0       	rjmp	.+48     	; 0x742 <pushButton_Get_Status+0x7a>
				case INITIAL_ONE:
					PB0_State1 = Gpio_PinRead(PUSH_BUTTON0_PORT,PUSH_BUTTON0_PIN);
     712:	64 e0       	ldi	r22, 0x04	; 4
     714:	82 e0       	ldi	r24, 0x02	; 2
     716:	0e 94 74 09 	call	0x12e8	; 0x12e8 <Gpio_PinRead>
     71a:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <PB0_State1.1665>
					if(PB0_State0 == PB0_State1)
     71e:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <PB0_State0.1664>
     722:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <PB0_State1.1665>
     726:	98 17       	cp	r25, r24
     728:	41 f4       	brne	.+16     	; 0x73a <pushButton_Get_Status+0x72>
					{
						PB_FinalState = PB0_State1;
     72a:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <PB0_State1.1665>
     72e:	89 83       	std	Y+1, r24	; 0x01
						PB0_State0 = INITIAL_ZERO;
     730:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <PB0_State0.1664>
						PB0_State1 = INITIAL_ZERO;
     734:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <PB0_State1.1665>
     738:	01 c0       	rjmp	.+2      	; 0x73c <pushButton_Get_Status+0x74>
					}else
					{
						PB_FinalState = INITIAL_ZERO;
     73a:	19 82       	std	Y+1, r1	; 0x01
					}
					PB0_CheckCounter = INITIAL_ZERO;
     73c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <PB0_CheckCounter.1662>
					break;
     740:	00 00       	nop
				default:
					break;
			}
			break;
     742:	2c c0       	rjmp	.+88     	; 0x79c <pushButton_Get_Status+0xd4>
		case PUSH_BUTTON1 :
			switch(PB1_CheckCounter)
     744:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <PB1_CheckCounter.1663>
     748:	88 2f       	mov	r24, r24
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	00 97       	sbiw	r24, 0x00	; 0
     74e:	19 f0       	breq	.+6      	; 0x756 <pushButton_Get_Status+0x8e>
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	69 f0       	breq	.+26     	; 0x76e <pushButton_Get_Status+0xa6>
					// Do Nothing
				}
				PB1_CheckCounter = INITIAL_ZERO;
				break;
				default:
				break;
     754:	22 c0       	rjmp	.+68     	; 0x79a <pushButton_Get_Status+0xd2>
			break;
		case PUSH_BUTTON1 :
			switch(PB1_CheckCounter)
			{
				case INITIAL_ZERO:
				PB1_State0 = Gpio_PinRead(PUSH_BUTTON1_PORT,PUSH_BUTTON1_PIN);
     756:	62 e0       	ldi	r22, 0x02	; 2
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	0e 94 74 09 	call	0x12e8	; 0x12e8 <Gpio_PinRead>
     75e:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <PB1_State0.1666>
				PB1_CheckCounter++;
     762:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <PB1_CheckCounter.1663>
     766:	8f 5f       	subi	r24, 0xFF	; 255
     768:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <PB1_CheckCounter.1663>
				//return PB_FinalState;
				break;
     76c:	16 c0       	rjmp	.+44     	; 0x79a <pushButton_Get_Status+0xd2>
				case INITIAL_ONE:
				PB1_State1 = Gpio_PinRead(PUSH_BUTTON1_PORT,PUSH_BUTTON1_PIN);
     76e:	62 e0       	ldi	r22, 0x02	; 2
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	0e 94 74 09 	call	0x12e8	; 0x12e8 <Gpio_PinRead>
     776:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <PB1_State1.1667>
				if(PB1_State0 == PB1_State1)
     77a:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <PB1_State0.1666>
     77e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <PB1_State1.1667>
     782:	98 17       	cp	r25, r24
     784:	39 f4       	brne	.+14     	; 0x794 <pushButton_Get_Status+0xcc>
				{
					PB_FinalState = PB1_State1;
     786:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <PB1_State1.1667>
     78a:	89 83       	std	Y+1, r24	; 0x01
					PB1_State0 = INITIAL_ZERO;
     78c:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <PB1_State0.1666>
					PB1_State1 = INITIAL_ZERO;
     790:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <PB1_State1.1667>
				}
				else
				{
					// Do Nothing
				}
				PB1_CheckCounter = INITIAL_ZERO;
     794:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <PB1_CheckCounter.1663>
				break;
     798:	00 00       	nop
				default:
				break;
			}
			break;
     79a:	00 00       	nop
		default:
			break;
	}
	return PB_FinalState;
     79c:	89 81       	ldd	r24, Y+1	; 0x01
     79e:	0f 90       	pop	r0
     7a0:	0f 90       	pop	r0
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	08 95       	ret

000007a8 <SwICU_Init>:
 */
uint8 SwICU_Disable(void)
{
	Timers_timer0_Stop();
	return OK;
}
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	cd b7       	in	r28, 0x3d	; 61
     7ae:	de b7       	in	r29, 0x3e	; 62
     7b0:	61 e0       	ldi	r22, 0x01	; 1
     7b2:	86 e0       	ldi	r24, 0x06	; 6
     7b4:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <Interrupts_ExtInt_Init>
     7b8:	83 e6       	ldi	r24, 0x63	; 99
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	0e 94 8d 0b 	call	0x171a	; 0x171a <Timers_Init>
     7c0:	0e 94 da 09 	call	0x13b4	; 0x13b4 <Interrupts_On>
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	08 95       	ret

000007cc <SwICU_Read>:
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	00 d0       	rcall	.+0      	; 0x7d2 <SwICU_Read+0x6>
     7d2:	cd b7       	in	r28, 0x3d	; 61
     7d4:	de b7       	in	r29, 0x3e	; 62
     7d6:	9a 83       	std	Y+2, r25	; 0x02
     7d8:	89 83       	std	Y+1, r24	; 0x01
     7da:	20 91 93 00 	lds	r18, 0x0093	; 0x800093 <raising_time_ns>
     7de:	30 91 94 00 	lds	r19, 0x0094	; 0x800094 <raising_time_ns+0x1>
     7e2:	40 91 95 00 	lds	r20, 0x0095	; 0x800095 <raising_time_ns+0x2>
     7e6:	50 91 96 00 	lds	r21, 0x0096	; 0x800096 <raising_time_ns+0x3>
     7ea:	60 91 97 00 	lds	r22, 0x0097	; 0x800097 <raising_time_ns+0x4>
     7ee:	70 91 98 00 	lds	r23, 0x0098	; 0x800098 <raising_time_ns+0x5>
     7f2:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <raising_time_ns+0x6>
     7f6:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <raising_time_ns+0x7>
     7fa:	e9 81       	ldd	r30, Y+1	; 0x01
     7fc:	fa 81       	ldd	r31, Y+2	; 0x02
     7fe:	20 83       	st	Z, r18
     800:	31 83       	std	Z+1, r19	; 0x01
     802:	42 83       	std	Z+2, r20	; 0x02
     804:	53 83       	std	Z+3, r21	; 0x03
     806:	64 83       	std	Z+4, r22	; 0x04
     808:	75 83       	std	Z+5, r23	; 0x05
     80a:	86 83       	std	Z+6, r24	; 0x06
     80c:	97 83       	std	Z+7, r25	; 0x07
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	0f 90       	pop	r0
     812:	0f 90       	pop	r0
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	08 95       	ret

0000081a <__vector_1>:
 * Description: This is an ISR that executes when an External interrupt occurs.
 * Parameter: void 
 * Return : void
 */
ISR_T(INT0_vect)
{
     81a:	1f 92       	push	r1
     81c:	0f 92       	push	r0
     81e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     822:	0f 92       	push	r0
     824:	11 24       	eor	r1, r1
     826:	0f 93       	push	r16
     828:	1f 93       	push	r17
     82a:	2f 93       	push	r18
     82c:	3f 93       	push	r19
     82e:	4f 93       	push	r20
     830:	5f 93       	push	r21
     832:	6f 93       	push	r22
     834:	7f 93       	push	r23
     836:	8f 93       	push	r24
     838:	9f 93       	push	r25
     83a:	af 93       	push	r26
     83c:	bf 93       	push	r27
     83e:	ef 93       	push	r30
     840:	ff 93       	push	r31
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
     846:	cd b7       	in	r28, 0x3d	; 61
     848:	de b7       	in	r29, 0x3e	; 62
	if(Falling_Risin_Flag == 0)
     84a:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <Falling_Risin_Flag>
     84e:	88 23       	and	r24, r24
     850:	59 f4       	brne	.+22     	; 0x868 <__stack+0x9>
	{
		Timers_timer0_Set(0);
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <Timers_timer0_Set>
		Timers_timer0_Start();
     858:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <Timers_timer0_Start>
		numOfOverflows = 0;
     85c:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <numOfOverflows>
		Falling_Risin_Flag = 1;
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <Falling_Risin_Flag>
		raising_time_ns =  ( ( (numOfOverflows * REGISTER_BIT_MAXVALUE) + Timers_timer0_Read()) * ( F_CPU_PRESCALLER_FACTOR /F_CPU ) );
		numOfOverflows = 0;
		Timers_timer0_Set(0);
		Falling_Risin_Flag = 0;
	}
}
     866:	37 c0       	rjmp	.+110    	; 0x8d6 <__stack+0x77>
		Timers_timer0_Set(0);
		Timers_timer0_Start();
		numOfOverflows = 0;
		Falling_Risin_Flag = 1;
	}
	else if(Falling_Risin_Flag == 1)
     868:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <Falling_Risin_Flag>
     86c:	81 30       	cpi	r24, 0x01	; 1
     86e:	99 f5       	brne	.+102    	; 0x8d6 <__stack+0x77>
	{
		raising_time_ns =  ( ( (numOfOverflows * REGISTER_BIT_MAXVALUE) + Timers_timer0_Read()) * ( F_CPU_PRESCALLER_FACTOR /F_CPU ) );
     870:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <numOfOverflows>
     874:	88 2f       	mov	r24, r24
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	18 2f       	mov	r17, r24
     87a:	00 27       	eor	r16, r16
     87c:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <Timers_timer0_Read>
     880:	88 2f       	mov	r24, r24
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	80 0f       	add	r24, r16
     886:	91 1f       	adc	r25, r17
     888:	9c 01       	movw	r18, r24
     88a:	99 0f       	add	r25, r25
     88c:	44 0b       	sbc	r20, r20
     88e:	55 0b       	sbc	r21, r21
     890:	8d e7       	ldi	r24, 0x7D	; 125
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	dc 01       	movw	r26, r24
     896:	0e 94 6f 11 	call	0x22de	; 0x22de <__muluhisi3>
     89a:	dc 01       	movw	r26, r24
     89c:	cb 01       	movw	r24, r22
     89e:	9c 01       	movw	r18, r24
     8a0:	ad 01       	movw	r20, r26
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	70 e0       	ldi	r23, 0x00	; 0
     8a6:	cb 01       	movw	r24, r22
     8a8:	20 93 93 00 	sts	0x0093, r18	; 0x800093 <raising_time_ns>
     8ac:	30 93 94 00 	sts	0x0094, r19	; 0x800094 <raising_time_ns+0x1>
     8b0:	40 93 95 00 	sts	0x0095, r20	; 0x800095 <raising_time_ns+0x2>
     8b4:	50 93 96 00 	sts	0x0096, r21	; 0x800096 <raising_time_ns+0x3>
     8b8:	60 93 97 00 	sts	0x0097, r22	; 0x800097 <raising_time_ns+0x4>
     8bc:	70 93 98 00 	sts	0x0098, r23	; 0x800098 <raising_time_ns+0x5>
     8c0:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <raising_time_ns+0x6>
     8c4:	90 93 9a 00 	sts	0x009A, r25	; 0x80009a <raising_time_ns+0x7>
		numOfOverflows = 0;
     8c8:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <numOfOverflows>
		Timers_timer0_Set(0);
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <Timers_timer0_Set>
		Falling_Risin_Flag = 0;
     8d2:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <Falling_Risin_Flag>
	}
}
     8d6:	00 00       	nop
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	ff 91       	pop	r31
     8de:	ef 91       	pop	r30
     8e0:	bf 91       	pop	r27
     8e2:	af 91       	pop	r26
     8e4:	9f 91       	pop	r25
     8e6:	8f 91       	pop	r24
     8e8:	7f 91       	pop	r23
     8ea:	6f 91       	pop	r22
     8ec:	5f 91       	pop	r21
     8ee:	4f 91       	pop	r20
     8f0:	3f 91       	pop	r19
     8f2:	2f 91       	pop	r18
     8f4:	1f 91       	pop	r17
     8f6:	0f 91       	pop	r16
     8f8:	0f 90       	pop	r0
     8fa:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     8fe:	0f 90       	pop	r0
     900:	1f 90       	pop	r1
     902:	18 95       	reti

00000904 <__vector_11>:
 * Description: This is an ISR that executes when the timer 2 overflows.
 * Parameter: void 
 * Return : void
 */
ISR_T(TIMER0_OVF_vect)
{
     904:	1f 92       	push	r1
     906:	0f 92       	push	r0
     908:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     90c:	0f 92       	push	r0
     90e:	11 24       	eor	r1, r1
     910:	8f 93       	push	r24
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	cd b7       	in	r28, 0x3d	; 61
     918:	de b7       	in	r29, 0x3e	; 62
	numOfOverflows++;
     91a:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <numOfOverflows>
     91e:	8f 5f       	subi	r24, 0xFF	; 255
     920:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <numOfOverflows>
     924:	00 00       	nop
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	8f 91       	pop	r24
     92c:	0f 90       	pop	r0
     92e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     932:	0f 90       	pop	r0
     934:	1f 90       	pop	r1
     936:	18 95       	reti

00000938 <Ultrasonic_Init>:
 * Description : This function is used to initialize the UltraSonic module.
 * Return : the function Returns nothing
 */

void Ultrasonic_Init(void)
{
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	cd b7       	in	r28, 0x3d	; 61
     93e:	de b7       	in	r29, 0x3e	; 62
	SwICU_Init();
     940:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <SwICU_Init>
	Gpio_PinDirection(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,SET_OUT);
     944:	4f ef       	ldi	r20, 0xFF	; 255
     946:	61 e0       	ldi	r22, 0x01	; 1
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	0e 94 29 08 	call	0x1052	; 0x1052 <Gpio_PinDirection>
	Gpio_PinDirection(ULTRASONIC_ECHO_PORT,ULTRASONIC_ECHO_PIN,SET_IN);
     94e:	40 e0       	ldi	r20, 0x00	; 0
     950:	64 e0       	ldi	r22, 0x04	; 4
     952:	83 e0       	ldi	r24, 0x03	; 3
     954:	0e 94 29 08 	call	0x1052	; 0x1052 <Gpio_PinDirection>
}
     958:	00 00       	nop
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	08 95       	ret

00000960 <Ultrasonic_Trigger>:
 * Description : This function is used to Trigger the UltraSonic module by sending a High
 *	    for at least a 10 micro seconds and then pull it low.
 * Return : the function Returns nothing
 */
void Ultrasonic_Trigger(void)
{
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
     964:	cd b7       	in	r28, 0x3d	; 61
     966:	de b7       	in	r29, 0x3e	; 62
	Gpio_PinWrite(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,HIGH);
     968:	41 e0       	ldi	r20, 0x01	; 1
     96a:	61 e0       	ldi	r22, 0x01	; 1
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
	SwDelay_us(20);
     972:	64 e1       	ldi	r22, 0x14	; 20
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <SwDelay_us>
	Gpio_PinWrite(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,LOW);
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	61 e0       	ldi	r22, 0x01	; 1
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Gpio_PinWrite>
}
     988:	00 00       	nop
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	08 95       	ret

00000990 <Ultrasonic_CalculateDistance>:
 * Description : This function is used to Calculate the Distance by receiving the Ton from the ICU Unit
 *                           and then returning the Distance.
 * Return : the function Returns the Distance in centimeters.
 */
uint32 Ultrasonic_CalculateDistance(void)
{
     990:	af 92       	push	r10
     992:	bf 92       	push	r11
     994:	cf 92       	push	r12
     996:	df 92       	push	r13
     998:	ef 92       	push	r14
     99a:	ff 92       	push	r15
     99c:	0f 93       	push	r16
     99e:	1f 93       	push	r17
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62
     9a8:	2c 97       	sbiw	r28, 0x0c	; 12
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	f8 94       	cli
     9ae:	de bf       	out	0x3e, r29	; 62
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	cd bf       	out	0x3d, r28	; 61
	uint32 theDistance;
	uint64 raising_time_ns;
	SwICU_Read(&raising_time_ns);
     9b4:	ce 01       	movw	r24, r28
     9b6:	05 96       	adiw	r24, 0x05	; 5
     9b8:	0e 94 e6 03 	call	0x7cc	; 0x7cc <SwICU_Read>
	theDistance = ( ( raising_time_ns / NANOSECONDS_FACTOR ) * SOUNDSPEED_FACTOR );
     9bc:	ad 80       	ldd	r10, Y+5	; 0x05
     9be:	be 80       	ldd	r11, Y+6	; 0x06
     9c0:	cf 80       	ldd	r12, Y+7	; 0x07
     9c2:	d8 84       	ldd	r13, Y+8	; 0x08
     9c4:	e9 84       	ldd	r14, Y+9	; 0x09
     9c6:	fa 84       	ldd	r15, Y+10	; 0x0a
     9c8:	0b 85       	ldd	r16, Y+11	; 0x0b
     9ca:	1c 85       	ldd	r17, Y+12	; 0x0c
     9cc:	2a 2d       	mov	r18, r10
     9ce:	3b 2d       	mov	r19, r11
     9d0:	4c 2d       	mov	r20, r12
     9d2:	5d 2d       	mov	r21, r13
     9d4:	6e 2d       	mov	r22, r14
     9d6:	7f 2d       	mov	r23, r15
     9d8:	80 2f       	mov	r24, r16
     9da:	91 2f       	mov	r25, r17
     9dc:	0e 94 19 10 	call	0x2032	; 0x2032 <__floatundisf>
     9e0:	dc 01       	movw	r26, r24
     9e2:	cb 01       	movw	r24, r22
     9e4:	28 e2       	ldi	r18, 0x28	; 40
     9e6:	3b e6       	ldi	r19, 0x6B	; 107
     9e8:	4e e6       	ldi	r20, 0x6E	; 110
     9ea:	5e e4       	ldi	r21, 0x4E	; 78
     9ec:	bc 01       	movw	r22, r24
     9ee:	cd 01       	movw	r24, r26
     9f0:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <__divsf3>
     9f4:	dc 01       	movw	r26, r24
     9f6:	cb 01       	movw	r24, r22
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	3c ef       	ldi	r19, 0xFC	; 252
     9fc:	45 e8       	ldi	r20, 0x85	; 133
     9fe:	56 e4       	ldi	r21, 0x46	; 70
     a00:	bc 01       	movw	r22, r24
     a02:	cd 01       	movw	r24, r26
     a04:	0e 94 a8 10 	call	0x2150	; 0x2150 <__mulsf3>
     a08:	dc 01       	movw	r26, r24
     a0a:	cb 01       	movw	r24, r22
     a0c:	bc 01       	movw	r22, r24
     a0e:	cd 01       	movw	r24, r26
     a10:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__fixunssfsi>
     a14:	dc 01       	movw	r26, r24
     a16:	cb 01       	movw	r24, r22
     a18:	89 83       	std	Y+1, r24	; 0x01
     a1a:	9a 83       	std	Y+2, r25	; 0x02
     a1c:	ab 83       	std	Y+3, r26	; 0x03
     a1e:	bc 83       	std	Y+4, r27	; 0x04
	return theDistance;	
     a20:	89 81       	ldd	r24, Y+1	; 0x01
     a22:	9a 81       	ldd	r25, Y+2	; 0x02
     a24:	ab 81       	ldd	r26, Y+3	; 0x03
     a26:	bc 81       	ldd	r27, Y+4	; 0x04
}
     a28:	bc 01       	movw	r22, r24
     a2a:	cd 01       	movw	r24, r26
     a2c:	2c 96       	adiw	r28, 0x0c	; 12
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	de bf       	out	0x3e, r29	; 62
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	cd bf       	out	0x3d, r28	; 61
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	df 90       	pop	r13
     a46:	cf 90       	pop	r12
     a48:	bf 90       	pop	r11
     a4a:	af 90       	pop	r10
     a4c:	08 95       	ret

00000a4e <Ultrasonic_Display>:
 * Function : Ultrasonic_Display
 * Description : This function is used to Display the Distance of the Measurement on LCD
 * Return void
 */
void Ultrasonic_Display(void)
{
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	cd b7       	in	r28, 0x3d	; 61
     a54:	de b7       	in	r29, 0x3e	; 62
     a56:	2c 97       	sbiw	r28, 0x0c	; 12
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	de bf       	out	0x3e, r29	; 62
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	cd bf       	out	0x3d, r28	; 61
	uint16 distance;
	char Buffer[10];
	Ultrasonic_Trigger();
     a62:	0e 94 b0 04 	call	0x960	; 0x960 <Ultrasonic_Trigger>
	distance = Ultrasonic_CalculateDistance();
     a66:	0e 94 c8 04 	call	0x990	; 0x990 <Ultrasonic_CalculateDistance>
     a6a:	dc 01       	movw	r26, r24
     a6c:	cb 01       	movw	r24, r22
     a6e:	9a 83       	std	Y+2, r25	; 0x02
     a70:	89 83       	std	Y+1, r24	; 0x01
	itoa(distance,Buffer,10);
     a72:	89 81       	ldd	r24, Y+1	; 0x01
     a74:	9a 81       	ldd	r25, Y+2	; 0x02
     a76:	9e 01       	movw	r18, r28
     a78:	2d 5f       	subi	r18, 0xFD	; 253
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4a e0       	ldi	r20, 0x0A	; 10
     a7e:	50 e0       	ldi	r21, 0x00	; 0
     a80:	b9 01       	movw	r22, r18
     a82:	0e 94 89 11 	call	0x2312	; 0x2312 <itoa>
	LCD_Clear();
     a86:	0e 94 2f 03 	call	0x65e	; 0x65e <LCD_Clear>
	LCD_DisplayString(Buffer);
     a8a:	ce 01       	movw	r24, r28
     a8c:	03 96       	adiw	r24, 0x03	; 3
     a8e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <LCD_DisplayString>
     a92:	00 00       	nop
     a94:	2c 96       	adiw	r28, 0x0c	; 12
     a96:	0f b6       	in	r0, 0x3f	; 63
     a98:	f8 94       	cli
     a9a:	de bf       	out	0x3e, r29	; 62
     a9c:	0f be       	out	0x3f, r0	; 63
     a9e:	cd bf       	out	0x3d, r28	; 61
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	08 95       	ret

00000aa6 <TimerSysticCallback>:
 * Function : TimerSysticCallback
 * Description: this function is Called by the ISR to Update the System Ticks
 * @return void 
 */
static void TimerSysticCallback(void)
{
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	cd b7       	in	r28, 0x3d	; 61
     aac:	de b7       	in	r29, 0x3e	; 62
	Systick++;
     aae:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <Systick>
     ab2:	90 91 ae 00 	lds	r25, 0x00AE	; 0x8000ae <Systick+0x1>
     ab6:	01 96       	adiw	r24, 0x01	; 1
     ab8:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <Systick+0x1>
     abc:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <Systick>
	if (Systick == MAX_SYSTICK_VALUS)
     ac0:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <Systick>
     ac4:	90 91 ae 00 	lds	r25, 0x00AE	; 0x8000ae <Systick+0x1>
     ac8:	88 3e       	cpi	r24, 0xE8	; 232
     aca:	9d 4f       	sbci	r25, 0xFD	; 253
     acc:	31 f4       	brne	.+12     	; 0xada <TimerSysticCallback+0x34>
	{
		Systick = INITIAL_ONE;
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <Systick+0x1>
     ad6:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <Systick>
	}else
	{
		//Do Nothing
	}
}
     ada:	00 00       	nop
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	08 95       	ret

00000ae2 <Sos_Init>:
 * Function : Sos_Init
 * Description: this function is to initialize the SOS
 * @return Status: of the initialization according to the Error handling macros 
 */
EnumSOSError_type Sos_Init(void)
{
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	00 d0       	rcall	.+0      	; 0xae8 <Sos_Init+0x6>
     ae8:	00 d0       	rcall	.+0      	; 0xaea <Sos_Init+0x8>
     aea:	00 d0       	rcall	.+0      	; 0xaec <Sos_Init+0xa>
     aec:	cd b7       	in	r28, 0x3d	; 61
     aee:	de b7       	in	r29, 0x3e	; 62
	uint8 index;
	EnumSOSError_type API_State = OK_T;
     af0:	1a 82       	std	Y+2, r1	; 0x02
	Systick = INITIAL_ONE;
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <Systick+0x1>
     afa:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <Systick>
	uint32 TimerCount_Time;
	
	/* Enable the Global Interrupt */
	Interrupts_On();
     afe:	0e 94 da 09 	call	0x13b4	; 0x13b4 <Interrupts_On>
	
	/* Set the Sleep Mode To Idle */
	set_sleep_mode(SLEEP_MODE_IDLE);
     b02:	85 e5       	ldi	r24, 0x55	; 85
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	25 e5       	ldi	r18, 0x55	; 85
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	f9 01       	movw	r30, r18
     b0c:	20 81       	ld	r18, Z
     b0e:	2f 78       	andi	r18, 0x8F	; 143
     b10:	fc 01       	movw	r30, r24
     b12:	20 83       	st	Z, r18

	/* Set the Systick of the Timer ISR */
	TimerCount_Time = MILLISECONSD_TO_MICROSECONSD_FACTOR * SYSTEM_TICK_MS;
     b14:	88 ee       	ldi	r24, 0xE8	; 232
     b16:	93 e0       	ldi	r25, 0x03	; 3
     b18:	a0 e0       	ldi	r26, 0x00	; 0
     b1a:	b0 e0       	ldi	r27, 0x00	; 0
     b1c:	8b 83       	std	Y+3, r24	; 0x03
     b1e:	9c 83       	std	Y+4, r25	; 0x04
     b20:	ad 83       	std	Y+5, r26	; 0x05
     b22:	be 83       	std	Y+6, r27	; 0x06
	
	/* Set the timer Call Back Value */
	Timers_SetCallBack(TimerSysticCallback);
     b24:	83 e5       	ldi	r24, 0x53	; 83
     b26:	95 e0       	ldi	r25, 0x05	; 5
     b28:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <Timers_SetCallBack>
	
	/* Initialize the Buffer used in the SOS */
	for(index = INITIAL_ZERO; index < SOS_MAX_NUMBER_OF_TASKS ; index++)
     b2c:	19 82       	std	Y+1, r1	; 0x01
     b2e:	3d c0       	rjmp	.+122    	; 0xbaa <Sos_Init+0xc8>
	{
		StrArrOfTasks[index].Periodicity = INITIAL_ZERO;
     b30:	89 81       	ldd	r24, Y+1	; 0x01
     b32:	28 2f       	mov	r18, r24
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	c9 01       	movw	r24, r18
     b38:	88 0f       	add	r24, r24
     b3a:	99 1f       	adc	r25, r25
     b3c:	82 0f       	add	r24, r18
     b3e:	93 1f       	adc	r25, r19
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	82 56       	subi	r24, 0x62	; 98
     b46:	9f 4f       	sbci	r25, 0xFF	; 255
     b48:	fc 01       	movw	r30, r24
     b4a:	11 82       	std	Z+1, r1	; 0x01
     b4c:	10 82       	st	Z, r1
		StrArrOfTasks[index].Priority = INITIAL_ZERO;
     b4e:	89 81       	ldd	r24, Y+1	; 0x01
     b50:	28 2f       	mov	r18, r24
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	c9 01       	movw	r24, r18
     b56:	88 0f       	add	r24, r24
     b58:	99 1f       	adc	r25, r25
     b5a:	82 0f       	add	r24, r18
     b5c:	93 1f       	adc	r25, r19
     b5e:	88 0f       	add	r24, r24
     b60:	99 1f       	adc	r25, r25
     b62:	83 56       	subi	r24, 0x63	; 99
     b64:	9f 4f       	sbci	r25, 0xFF	; 255
     b66:	fc 01       	movw	r30, r24
     b68:	10 82       	st	Z, r1
		StrArrOfTasks[index].TaskState = TaskDormant;
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	c9 01       	movw	r24, r18
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	82 0f       	add	r24, r18
     b78:	93 1f       	adc	r25, r19
     b7a:	88 0f       	add	r24, r24
     b7c:	99 1f       	adc	r25, r25
     b7e:	80 56       	subi	r24, 0x60	; 96
     b80:	9f 4f       	sbci	r25, 0xFF	; 255
     b82:	fc 01       	movw	r30, r24
     b84:	10 82       	st	Z, r1
		StrArrOfTasks[index].PtrTask = NULL;
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	28 2f       	mov	r18, r24
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	c9 01       	movw	r24, r18
     b8e:	88 0f       	add	r24, r24
     b90:	99 1f       	adc	r25, r25
     b92:	82 0f       	add	r24, r18
     b94:	93 1f       	adc	r25, r19
     b96:	88 0f       	add	r24, r24
     b98:	99 1f       	adc	r25, r25
     b9a:	85 56       	subi	r24, 0x65	; 101
     b9c:	9f 4f       	sbci	r25, 0xFF	; 255
     b9e:	fc 01       	movw	r30, r24
     ba0:	11 82       	std	Z+1, r1	; 0x01
     ba2:	10 82       	st	Z, r1
	
	/* Set the timer Call Back Value */
	Timers_SetCallBack(TimerSysticCallback);
	
	/* Initialize the Buffer used in the SOS */
	for(index = INITIAL_ZERO; index < SOS_MAX_NUMBER_OF_TASKS ; index++)
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	8f 5f       	subi	r24, 0xFF	; 255
     ba8:	89 83       	std	Y+1, r24	; 0x01
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	83 30       	cpi	r24, 0x03	; 3
     bae:	08 f4       	brcc	.+2      	; 0xbb2 <Sos_Init+0xd0>
     bb0:	bf cf       	rjmp	.-130    	; 0xb30 <Sos_Init+0x4e>
		/* Set the default resolution  */
		Timers_SetCounter(TIMER_0,TimerCount_Time);
		break;
		case TIMER_1:
		/* Initialize the Timer Used  */
		Timers_Init(&timer1_cfg_s);
     bb2:	8e e6       	ldi	r24, 0x6E	; 110
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	0e 94 8d 0b 	call	0x171a	; 0x171a <Timers_Init>
		
		/* Set the default resolution  */
		Timers_SetCounter(TIMER_1,TimerCount_Time);
     bba:	8b 81       	ldd	r24, Y+3	; 0x03
     bbc:	9c 81       	ldd	r25, Y+4	; 0x04
     bbe:	ad 81       	ldd	r26, Y+5	; 0x05
     bc0:	be 81       	ldd	r27, Y+6	; 0x06
     bc2:	ac 01       	movw	r20, r24
     bc4:	bd 01       	movw	r22, r26
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <Timers_SetCounter>
		break;
     bcc:	00 00       	nop
		break;
		default:
		API_State = ERROR_INVALID_INPUT;
		break;
	}
	return API_State;
     bce:	8a 81       	ldd	r24, Y+2	; 0x02
}
     bd0:	26 96       	adiw	r28, 0x06	; 6
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	f8 94       	cli
     bd6:	de bf       	out	0x3e, r29	; 62
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	cd bf       	out	0x3d, r28	; 61
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	08 95       	ret

00000be2 <Sos_Create_Task>:
					i/p: The periodicity of the Task
	Note : The Stable range of the Task is in range [5 to 2000 Systicks]
 * @return EnmTMUError_t: the status of the function according to the Error handling Enum 
 */
EnumSOSError_type Sos_Create_Task(v_PtrFunc_v_type PtrFunc,uint8 priority, uint16 periodicity)
{
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
     bea:	27 97       	sbiw	r28, 0x07	; 7
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	f8 94       	cli
     bf0:	de bf       	out	0x3e, r29	; 62
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	cd bf       	out	0x3d, r28	; 61
     bf6:	9c 83       	std	Y+4, r25	; 0x04
     bf8:	8b 83       	std	Y+3, r24	; 0x03
     bfa:	6d 83       	std	Y+5, r22	; 0x05
     bfc:	5f 83       	std	Y+7, r21	; 0x07
     bfe:	4e 83       	std	Y+6, r20	; 0x06
	EnumSOSError_type API_State = OK_T;
     c00:	19 82       	std	Y+1, r1	; 0x01
	uint8 index;
	/* Protect from NUll pointer */ 
	if ( NULL != PtrFunc)
     c02:	8b 81       	ldd	r24, Y+3	; 0x03
     c04:	9c 81       	ldd	r25, Y+4	; 0x04
     c06:	89 2b       	or	r24, r25
     c08:	09 f4       	brne	.+2      	; 0xc0c <Sos_Create_Task+0x2a>
     c0a:	73 c0       	rjmp	.+230    	; 0xcf2 <Sos_Create_Task+0x110>
	{   /* Loop Through the Array of Tasks */ 
		for (index = INITIAL_ZERO ; index < SOS_MAX_NUMBER_OF_TASKS ; index++)
     c0c:	1a 82       	std	Y+2, r1	; 0x02
     c0e:	6c c0       	rjmp	.+216    	; 0xce8 <Sos_Create_Task+0x106>
		{	 /* Find a task place that hasn't been Reserved by another task */ 
			if (StrArrOfTasks[index].PtrTask == NULL)
     c10:	8a 81       	ldd	r24, Y+2	; 0x02
     c12:	28 2f       	mov	r18, r24
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	c9 01       	movw	r24, r18
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	82 0f       	add	r24, r18
     c1e:	93 1f       	adc	r25, r19
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	85 56       	subi	r24, 0x65	; 101
     c26:	9f 4f       	sbci	r25, 0xFF	; 255
     c28:	fc 01       	movw	r30, r24
     c2a:	80 81       	ld	r24, Z
     c2c:	91 81       	ldd	r25, Z+1	; 0x01
     c2e:	89 2b       	or	r24, r25
     c30:	09 f0       	breq	.+2      	; 0xc34 <Sos_Create_Task+0x52>
     c32:	55 c0       	rjmp	.+170    	; 0xcde <Sos_Create_Task+0xfc>
			{
				/* Set the Entered Values to the Empty Space in the Task's Array*/
				StrArrOfTasks[index].PtrTask = PtrFunc;
     c34:	8a 81       	ldd	r24, Y+2	; 0x02
     c36:	28 2f       	mov	r18, r24
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	c9 01       	movw	r24, r18
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	82 0f       	add	r24, r18
     c42:	93 1f       	adc	r25, r19
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	85 56       	subi	r24, 0x65	; 101
     c4a:	9f 4f       	sbci	r25, 0xFF	; 255
     c4c:	2b 81       	ldd	r18, Y+3	; 0x03
     c4e:	3c 81       	ldd	r19, Y+4	; 0x04
     c50:	fc 01       	movw	r30, r24
     c52:	31 83       	std	Z+1, r19	; 0x01
     c54:	20 83       	st	Z, r18
				StrArrOfTasks[index].Periodicity = periodicity;
     c56:	8a 81       	ldd	r24, Y+2	; 0x02
     c58:	28 2f       	mov	r18, r24
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	c9 01       	movw	r24, r18
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
     c62:	82 0f       	add	r24, r18
     c64:	93 1f       	adc	r25, r19
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	82 56       	subi	r24, 0x62	; 98
     c6c:	9f 4f       	sbci	r25, 0xFF	; 255
     c6e:	2e 81       	ldd	r18, Y+6	; 0x06
     c70:	3f 81       	ldd	r19, Y+7	; 0x07
     c72:	fc 01       	movw	r30, r24
     c74:	31 83       	std	Z+1, r19	; 0x01
     c76:	20 83       	st	Z, r18
				StrArrOfTasks[index].TaskState = TaskReady;
     c78:	8a 81       	ldd	r24, Y+2	; 0x02
     c7a:	28 2f       	mov	r18, r24
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	c9 01       	movw	r24, r18
     c80:	88 0f       	add	r24, r24
     c82:	99 1f       	adc	r25, r25
     c84:	82 0f       	add	r24, r18
     c86:	93 1f       	adc	r25, r19
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	80 56       	subi	r24, 0x60	; 96
     c8e:	9f 4f       	sbci	r25, 0xFF	; 255
     c90:	21 e0       	ldi	r18, 0x01	; 1
     c92:	fc 01       	movw	r30, r24
     c94:	20 83       	st	Z, r18
				
				/* Check If the entered priority is larger than the maximum one >> Set it to the Max */
				if ( priority <= SOS_MAX_PRIORITY)
     c96:	8d 81       	ldd	r24, Y+5	; 0x05
     c98:	87 30       	cpi	r24, 0x07	; 7
     c9a:	80 f4       	brcc	.+32     	; 0xcbc <Sos_Create_Task+0xda>
				{
					StrArrOfTasks[index].Priority = priority;
     c9c:	8a 81       	ldd	r24, Y+2	; 0x02
     c9e:	28 2f       	mov	r18, r24
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	c9 01       	movw	r24, r18
     ca4:	88 0f       	add	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	82 0f       	add	r24, r18
     caa:	93 1f       	adc	r25, r19
     cac:	88 0f       	add	r24, r24
     cae:	99 1f       	adc	r25, r25
     cb0:	83 56       	subi	r24, 0x63	; 99
     cb2:	9f 4f       	sbci	r25, 0xFF	; 255
     cb4:	2d 81       	ldd	r18, Y+5	; 0x05
     cb6:	fc 01       	movw	r30, r24
     cb8:	20 83       	st	Z, r18
     cba:	0f c0       	rjmp	.+30     	; 0xcda <Sos_Create_Task+0xf8>
				}
				else
				{
					StrArrOfTasks[index].Priority = SOS_MAX_PRIORITY;
     cbc:	8a 81       	ldd	r24, Y+2	; 0x02
     cbe:	28 2f       	mov	r18, r24
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	c9 01       	movw	r24, r18
     cc4:	88 0f       	add	r24, r24
     cc6:	99 1f       	adc	r25, r25
     cc8:	82 0f       	add	r24, r18
     cca:	93 1f       	adc	r25, r19
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	83 56       	subi	r24, 0x63	; 99
     cd2:	9f 4f       	sbci	r25, 0xFF	; 255
     cd4:	26 e0       	ldi	r18, 0x06	; 6
     cd6:	fc 01       	movw	r30, r24
     cd8:	20 83       	st	Z, r18
				}
				API_State = OK_T;
     cda:	19 82       	std	Y+1, r1	; 0x01
				break;
     cdc:	0c c0       	rjmp	.+24     	; 0xcf6 <Sos_Create_Task+0x114>
			}
			else
			{
				API_State = ERROR_MAX_TASKS_NUMBER_REACHED;
     cde:	83 e0       	ldi	r24, 0x03	; 3
     ce0:	89 83       	std	Y+1, r24	; 0x01
	EnumSOSError_type API_State = OK_T;
	uint8 index;
	/* Protect from NUll pointer */ 
	if ( NULL != PtrFunc)
	{   /* Loop Through the Array of Tasks */ 
		for (index = INITIAL_ZERO ; index < SOS_MAX_NUMBER_OF_TASKS ; index++)
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	8f 5f       	subi	r24, 0xFF	; 255
     ce6:	8a 83       	std	Y+2, r24	; 0x02
     ce8:	8a 81       	ldd	r24, Y+2	; 0x02
     cea:	83 30       	cpi	r24, 0x03	; 3
     cec:	08 f4       	brcc	.+2      	; 0xcf0 <Sos_Create_Task+0x10e>
     cee:	90 cf       	rjmp	.-224    	; 0xc10 <Sos_Create_Task+0x2e>
     cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <Sos_Create_Task+0x114>
			}
		}
	}
	else
	{
		API_State = ERROR_NULL_POINTER;
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	89 83       	std	Y+1, r24	; 0x01
	}
	return API_State;
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
}
     cf8:	27 96       	adiw	r28, 0x07	; 7
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	f8 94       	cli
     cfe:	de bf       	out	0x3e, r29	; 62
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	cd bf       	out	0x3d, r28	; 61
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	08 95       	ret

00000d0a <Sos_Run>:
 * Function : Sos_Run
 * Description: this function is to run the System Scheduler (Algorithm)
 * @return void
 */
void Sos_Run(void)
{
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	00 d0       	rcall	.+0      	; 0xd10 <Sos_Run+0x6>
     d10:	1f 92       	push	r1
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
	sint8 index = INITIAL_ZERO;
     d16:	19 82       	std	Y+1, r1	; 0x01
	sint8 MaxPriorityIndex = INITIAL_MINUS_ONE;
     d18:	8f ef       	ldi	r24, 0xFF	; 255
     d1a:	8a 83       	std	Y+2, r24	; 0x02
	sint8 MaxPriority = INITIAL_ZERO;
     d1c:	1b 82       	std	Y+3, r1	; 0x03
	/* Start the Timer Used  */
	Timers_Start(SOS_TIMER);
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <Timers_Start>
	while(TRUE)
	{	
		for (index = INITIAL_ZERO; index < SOS_MAX_NUMBER_OF_TASKS; index++)
     d24:	19 82       	std	Y+1, r1	; 0x01
     d26:	98 c0       	rjmp	.+304    	; 0xe58 <Sos_Run+0x14e>
		{
				switch( (StrArrOfTasks[index].TaskState) )
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	28 2f       	mov	r18, r24
     d2c:	88 0f       	add	r24, r24
     d2e:	33 0b       	sbc	r19, r19
     d30:	c9 01       	movw	r24, r18
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	82 0f       	add	r24, r18
     d38:	93 1f       	adc	r25, r19
     d3a:	88 0f       	add	r24, r24
     d3c:	99 1f       	adc	r25, r25
     d3e:	80 56       	subi	r24, 0x60	; 96
     d40:	9f 4f       	sbci	r25, 0xFF	; 255
     d42:	fc 01       	movw	r30, r24
     d44:	80 81       	ld	r24, Z
     d46:	88 2f       	mov	r24, r24
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	81 30       	cpi	r24, 0x01	; 1
     d4c:	91 05       	cpc	r25, r1
     d4e:	71 f0       	breq	.+28     	; 0xd6c <Sos_Run+0x62>
     d50:	82 30       	cpi	r24, 0x02	; 2
     d52:	91 05       	cpc	r25, r1
     d54:	24 f4       	brge	.+8      	; 0xd5e <Sos_Run+0x54>
     d56:	89 2b       	or	r24, r25
     d58:	09 f4       	brne	.+2      	; 0xd5c <Sos_Run+0x52>
     d5a:	76 c0       	rjmp	.+236    	; 0xe48 <Sos_Run+0x13e>
						{
							//Do nothing
						}
						break;
					default:
						break;
     d5c:	7a c0       	rjmp	.+244    	; 0xe52 <Sos_Run+0x148>
	Timers_Start(SOS_TIMER);
	while(TRUE)
	{	
		for (index = INITIAL_ZERO; index < SOS_MAX_NUMBER_OF_TASKS; index++)
		{
				switch( (StrArrOfTasks[index].TaskState) )
     d5e:	82 30       	cpi	r24, 0x02	; 2
     d60:	91 05       	cpc	r25, r1
     d62:	81 f1       	breq	.+96     	; 0xdc4 <Sos_Run+0xba>
     d64:	03 97       	sbiw	r24, 0x03	; 3
     d66:	09 f4       	brne	.+2      	; 0xd6a <Sos_Run+0x60>
     d68:	41 c0       	rjmp	.+130    	; 0xdec <Sos_Run+0xe2>
						{
							//Do nothing
						}
						break;
					default:
						break;
     d6a:	73 c0       	rjmp	.+230    	; 0xe52 <Sos_Run+0x148>
				{
					case TaskDormant:
						//Do Nothing
						break;
					case TaskReady:
						if( MaxPriority < StrArrOfTasks[index].Priority )
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	48 2f       	mov	r20, r24
     d70:	88 0f       	add	r24, r24
     d72:	55 0b       	sbc	r21, r21
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	28 2f       	mov	r18, r24
     d78:	88 0f       	add	r24, r24
     d7a:	33 0b       	sbc	r19, r19
     d7c:	c9 01       	movw	r24, r18
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	82 0f       	add	r24, r18
     d84:	93 1f       	adc	r25, r19
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	83 56       	subi	r24, 0x63	; 99
     d8c:	9f 4f       	sbci	r25, 0xFF	; 255
     d8e:	fc 01       	movw	r30, r24
     d90:	80 81       	ld	r24, Z
     d92:	88 2f       	mov	r24, r24
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	48 17       	cp	r20, r24
     d98:	59 07       	cpc	r21, r25
     d9a:	0c f0       	brlt	.+2      	; 0xd9e <Sos_Run+0x94>
     d9c:	57 c0       	rjmp	.+174    	; 0xe4c <Sos_Run+0x142>
						{
							MaxPriority = StrArrOfTasks[index].Priority;
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	28 2f       	mov	r18, r24
     da2:	88 0f       	add	r24, r24
     da4:	33 0b       	sbc	r19, r19
     da6:	c9 01       	movw	r24, r18
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	82 0f       	add	r24, r18
     dae:	93 1f       	adc	r25, r19
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	83 56       	subi	r24, 0x63	; 99
     db6:	9f 4f       	sbci	r25, 0xFF	; 255
     db8:	fc 01       	movw	r30, r24
     dba:	80 81       	ld	r24, Z
     dbc:	8b 83       	std	Y+3, r24	; 0x03
							MaxPriorityIndex = index;
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	8a 83       	std	Y+2, r24	; 0x02
						}
						else
						{
							//Do Nothing
						}
						break;
     dc2:	44 c0       	rjmp	.+136    	; 0xe4c <Sos_Run+0x142>
					case TaskRunning:
						/* Return the State of the Task to waiting */
						StrArrOfTasks[index].TaskState = TaskWaiting;
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	28 2f       	mov	r18, r24
     dc8:	88 0f       	add	r24, r24
     dca:	33 0b       	sbc	r19, r19
     dcc:	c9 01       	movw	r24, r18
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	82 0f       	add	r24, r18
     dd4:	93 1f       	adc	r25, r19
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	80 56       	subi	r24, 0x60	; 96
     ddc:	9f 4f       	sbci	r25, 0xFF	; 255
     dde:	23 e0       	ldi	r18, 0x03	; 3
     de0:	fc 01       	movw	r30, r24
     de2:	20 83       	st	Z, r18
						index = index - INITIAL_ONE; 
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	81 50       	subi	r24, 0x01	; 1
     de8:	89 83       	std	Y+1, r24	; 0x01
						break;
     dea:	33 c0       	rjmp	.+102    	; 0xe52 <Sos_Run+0x148>
					case TaskWaiting:
						if( (Systick % StrArrOfTasks[index].Periodicity) == FALSE)
     dec:	40 91 ad 00 	lds	r20, 0x00AD	; 0x8000ad <Systick>
     df0:	50 91 ae 00 	lds	r21, 0x00AE	; 0x8000ae <Systick+0x1>
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	28 2f       	mov	r18, r24
     df8:	88 0f       	add	r24, r24
     dfa:	33 0b       	sbc	r19, r19
     dfc:	c9 01       	movw	r24, r18
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	82 0f       	add	r24, r18
     e04:	93 1f       	adc	r25, r19
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	82 56       	subi	r24, 0x62	; 98
     e0c:	9f 4f       	sbci	r25, 0xFF	; 255
     e0e:	fc 01       	movw	r30, r24
     e10:	20 81       	ld	r18, Z
     e12:	31 81       	ldd	r19, Z+1	; 0x01
     e14:	ca 01       	movw	r24, r20
     e16:	b9 01       	movw	r22, r18
     e18:	0e 94 25 11 	call	0x224a	; 0x224a <__udivmodhi4>
     e1c:	89 2b       	or	r24, r25
     e1e:	c1 f4       	brne	.+48     	; 0xe50 <Sos_Run+0x146>
						{
							/* Return the State of the Task to Ready */
							StrArrOfTasks[index].TaskState = TaskReady;
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	28 2f       	mov	r18, r24
     e24:	88 0f       	add	r24, r24
     e26:	33 0b       	sbc	r19, r19
     e28:	c9 01       	movw	r24, r18
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	82 0f       	add	r24, r18
     e30:	93 1f       	adc	r25, r19
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	80 56       	subi	r24, 0x60	; 96
     e38:	9f 4f       	sbci	r25, 0xFF	; 255
     e3a:	21 e0       	ldi	r18, 0x01	; 1
     e3c:	fc 01       	movw	r30, r24
     e3e:	20 83       	st	Z, r18
							index = index - INITIAL_ONE;
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	81 50       	subi	r24, 0x01	; 1
     e44:	89 83       	std	Y+1, r24	; 0x01
						}
						else
						{
							//Do nothing
						}
						break;
     e46:	04 c0       	rjmp	.+8      	; 0xe50 <Sos_Run+0x146>
		{
				switch( (StrArrOfTasks[index].TaskState) )
				{
					case TaskDormant:
						//Do Nothing
						break;
     e48:	00 00       	nop
     e4a:	03 c0       	rjmp	.+6      	; 0xe52 <Sos_Run+0x148>
						}
						else
						{
							//Do Nothing
						}
						break;
     e4c:	00 00       	nop
     e4e:	01 c0       	rjmp	.+2      	; 0xe52 <Sos_Run+0x148>
						}
						else
						{
							//Do nothing
						}
						break;
     e50:	00 00       	nop
	sint8 MaxPriority = INITIAL_ZERO;
	/* Start the Timer Used  */
	Timers_Start(SOS_TIMER);
	while(TRUE)
	{	
		for (index = INITIAL_ZERO; index < SOS_MAX_NUMBER_OF_TASKS; index++)
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	8f 5f       	subi	r24, 0xFF	; 255
     e56:	89 83       	std	Y+1, r24	; 0x01
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	83 30       	cpi	r24, 0x03	; 3
     e5c:	0c f4       	brge	.+2      	; 0xe60 <Sos_Run+0x156>
     e5e:	64 cf       	rjmp	.-312    	; 0xd28 <Sos_Run+0x1e>
					default:
						break;
				}
		}
		
		if(MaxPriorityIndex >= INITIAL_ZERO)
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	88 23       	and	r24, r24
     e64:	bc f1       	brlt	.+110    	; 0xed4 <Sos_Run+0x1ca>
		{
			StrArrOfTasks[MaxPriorityIndex].PtrTask();
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	28 2f       	mov	r18, r24
     e6a:	88 0f       	add	r24, r24
     e6c:	33 0b       	sbc	r19, r19
     e6e:	c9 01       	movw	r24, r18
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	82 0f       	add	r24, r18
     e76:	93 1f       	adc	r25, r19
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	85 56       	subi	r24, 0x65	; 101
     e7e:	9f 4f       	sbci	r25, 0xFF	; 255
     e80:	fc 01       	movw	r30, r24
     e82:	80 81       	ld	r24, Z
     e84:	91 81       	ldd	r25, Z+1	; 0x01
     e86:	fc 01       	movw	r30, r24
     e88:	09 95       	icall
			if (StrArrOfTasks[MaxPriorityIndex].PtrTask != NULL)
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	28 2f       	mov	r18, r24
     e8e:	88 0f       	add	r24, r24
     e90:	33 0b       	sbc	r19, r19
     e92:	c9 01       	movw	r24, r18
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	82 0f       	add	r24, r18
     e9a:	93 1f       	adc	r25, r19
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	85 56       	subi	r24, 0x65	; 101
     ea2:	9f 4f       	sbci	r25, 0xFF	; 255
     ea4:	fc 01       	movw	r30, r24
     ea6:	80 81       	ld	r24, Z
     ea8:	91 81       	ldd	r25, Z+1	; 0x01
     eaa:	89 2b       	or	r24, r25
     eac:	81 f0       	breq	.+32     	; 0xece <Sos_Run+0x1c4>
			{
				StrArrOfTasks[MaxPriorityIndex].TaskState = TaskRunning;		
     eae:	8a 81       	ldd	r24, Y+2	; 0x02
     eb0:	28 2f       	mov	r18, r24
     eb2:	88 0f       	add	r24, r24
     eb4:	33 0b       	sbc	r19, r19
     eb6:	c9 01       	movw	r24, r18
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	82 0f       	add	r24, r18
     ebe:	93 1f       	adc	r25, r19
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	80 56       	subi	r24, 0x60	; 96
     ec6:	9f 4f       	sbci	r25, 0xFF	; 255
     ec8:	22 e0       	ldi	r18, 0x02	; 2
     eca:	fc 01       	movw	r30, r24
     ecc:	20 83       	st	Z, r18
			}
			
			MaxPriorityIndex = INITIAL_MINUS_ONE;
     ece:	8f ef       	ldi	r24, 0xFF	; 255
     ed0:	8a 83       	std	Y+2, r24	; 0x02
			MaxPriority = INITIAL_ZERO;
     ed2:	1b 82       	std	Y+3, r1	; 0x03
		}
		else
		{
			//Do Nothing
		}
		sleep_mode();
     ed4:	85 e5       	ldi	r24, 0x55	; 85
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	25 e5       	ldi	r18, 0x55	; 85
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	f9 01       	movw	r30, r18
     ede:	20 81       	ld	r18, Z
     ee0:	20 68       	ori	r18, 0x80	; 128
     ee2:	fc 01       	movw	r30, r24
     ee4:	20 83       	st	Z, r18
     ee6:	88 95       	sleep
     ee8:	85 e5       	ldi	r24, 0x55	; 85
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	25 e5       	ldi	r18, 0x55	; 85
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	f9 01       	movw	r30, r18
     ef2:	20 81       	ld	r18, Z
     ef4:	2f 77       	andi	r18, 0x7F	; 127
     ef6:	fc 01       	movw	r30, r24
     ef8:	20 83       	st	Z, r18
	}
     efa:	14 cf       	rjmp	.-472    	; 0xd24 <Sos_Run+0x1a>

00000efc <Sos_Delete_Task>:
 * Description: this function is to Delete the Task
 * param PtrTaskFunction: pointer to function to the task to be deleted
 * @return the State of the API according to the Enum of the Error Handler
 */
EnumSOSError_type Sos_Delete_Task(v_PtrFunc_v_type PtrTaskFunction)
{
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	00 d0       	rcall	.+0      	; 0xf02 <Sos_Delete_Task+0x6>
     f02:	00 d0       	rcall	.+0      	; 0xf04 <Sos_Delete_Task+0x8>
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	9c 83       	std	Y+4, r25	; 0x04
     f0a:	8b 83       	std	Y+3, r24	; 0x03
	EnumSOSError_type API_State = OK_T;
     f0c:	19 82       	std	Y+1, r1	; 0x01
	uint8 index;
	
	if (PtrTaskFunction != NULL)
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	9c 81       	ldd	r25, Y+4	; 0x04
     f12:	89 2b       	or	r24, r25
     f14:	09 f4       	brne	.+2      	; 0xf18 <Sos_Delete_Task+0x1c>
     f16:	5c c0       	rjmp	.+184    	; 0xfd0 <Sos_Delete_Task+0xd4>
	{
		for (index = INITIAL_ZERO ; index < SOS_MAX_NUMBER_OF_TASKS ; index++)
     f18:	1a 82       	std	Y+2, r1	; 0x02
     f1a:	55 c0       	rjmp	.+170    	; 0xfc6 <Sos_Delete_Task+0xca>
		{
			if ( StrArrOfTasks[index].PtrTask == PtrTaskFunction )
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	c9 01       	movw	r24, r18
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	82 0f       	add	r24, r18
     f2a:	93 1f       	adc	r25, r19
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	85 56       	subi	r24, 0x65	; 101
     f32:	9f 4f       	sbci	r25, 0xFF	; 255
     f34:	fc 01       	movw	r30, r24
     f36:	20 81       	ld	r18, Z
     f38:	31 81       	ldd	r19, Z+1	; 0x01
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	9c 81       	ldd	r25, Y+4	; 0x04
     f3e:	28 17       	cp	r18, r24
     f40:	39 07       	cpc	r19, r25
     f42:	e1 f5       	brne	.+120    	; 0xfbc <Sos_Delete_Task+0xc0>
			{
				StrArrOfTasks[index].PtrTask     = NULL ;
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	c9 01       	movw	r24, r18
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	82 0f       	add	r24, r18
     f52:	93 1f       	adc	r25, r19
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	85 56       	subi	r24, 0x65	; 101
     f5a:	9f 4f       	sbci	r25, 0xFF	; 255
     f5c:	fc 01       	movw	r30, r24
     f5e:	11 82       	std	Z+1, r1	; 0x01
     f60:	10 82       	st	Z, r1
				StrArrOfTasks[index].Periodicity = FALSE;
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	c9 01       	movw	r24, r18
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	82 0f       	add	r24, r18
     f70:	93 1f       	adc	r25, r19
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	82 56       	subi	r24, 0x62	; 98
     f78:	9f 4f       	sbci	r25, 0xFF	; 255
     f7a:	fc 01       	movw	r30, r24
     f7c:	11 82       	std	Z+1, r1	; 0x01
     f7e:	10 82       	st	Z, r1
				StrArrOfTasks[index].Priority    = FALSE;
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	c9 01       	movw	r24, r18
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	82 0f       	add	r24, r18
     f8e:	93 1f       	adc	r25, r19
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	83 56       	subi	r24, 0x63	; 99
     f96:	9f 4f       	sbci	r25, 0xFF	; 255
     f98:	fc 01       	movw	r30, r24
     f9a:	10 82       	st	Z, r1
				StrArrOfTasks[index].TaskState   = TaskDormant;
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	c9 01       	movw	r24, r18
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	82 0f       	add	r24, r18
     faa:	93 1f       	adc	r25, r19
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	80 56       	subi	r24, 0x60	; 96
     fb2:	9f 4f       	sbci	r25, 0xFF	; 255
     fb4:	fc 01       	movw	r30, r24
     fb6:	10 82       	st	Z, r1
				API_State = OK_T;
     fb8:	19 82       	std	Y+1, r1	; 0x01
				break;
     fba:	0c c0       	rjmp	.+24     	; 0xfd4 <Sos_Delete_Task+0xd8>
			}
			else
			{
				API_State = ERROR_INVALID_INPUT;
     fbc:	82 e0       	ldi	r24, 0x02	; 2
     fbe:	89 83       	std	Y+1, r24	; 0x01
	EnumSOSError_type API_State = OK_T;
	uint8 index;
	
	if (PtrTaskFunction != NULL)
	{
		for (index = INITIAL_ZERO ; index < SOS_MAX_NUMBER_OF_TASKS ; index++)
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	8f 5f       	subi	r24, 0xFF	; 255
     fc4:	8a 83       	std	Y+2, r24	; 0x02
     fc6:	8a 81       	ldd	r24, Y+2	; 0x02
     fc8:	83 30       	cpi	r24, 0x03	; 3
     fca:	08 f4       	brcc	.+2      	; 0xfce <Sos_Delete_Task+0xd2>
     fcc:	a7 cf       	rjmp	.-178    	; 0xf1c <Sos_Delete_Task+0x20>
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <Sos_Delete_Task+0xd8>
			}
		}
	}
	else
	{
		API_State = ERROR_NULL_POINTER;
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	89 83       	std	Y+1, r24	; 0x01
	}
	return API_State;
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	08 95       	ret

00000fe4 <Gpio_PortDirection>:
		break;
		case MYPORTD :
		PORT_D ^= (pins);
		break;
	}
}
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	00 d0       	rcall	.+0      	; 0xfea <Gpio_PortDirection+0x6>
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	89 83       	std	Y+1, r24	; 0x01
     ff0:	6a 83       	std	Y+2, r22	; 0x02
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	81 30       	cpi	r24, 0x01	; 1
     ffa:	91 05       	cpc	r25, r1
     ffc:	91 f0       	breq	.+36     	; 0x1022 <Gpio_PortDirection+0x3e>
     ffe:	82 30       	cpi	r24, 0x02	; 2
    1000:	91 05       	cpc	r25, r1
    1002:	1c f4       	brge	.+6      	; 0x100a <Gpio_PortDirection+0x26>
    1004:	89 2b       	or	r24, r25
    1006:	39 f0       	breq	.+14     	; 0x1016 <Gpio_PortDirection+0x32>
    1008:	1e c0       	rjmp	.+60     	; 0x1046 <Gpio_PortDirection+0x62>
    100a:	82 30       	cpi	r24, 0x02	; 2
    100c:	91 05       	cpc	r25, r1
    100e:	79 f0       	breq	.+30     	; 0x102e <Gpio_PortDirection+0x4a>
    1010:	03 97       	sbiw	r24, 0x03	; 3
    1012:	99 f0       	breq	.+38     	; 0x103a <Gpio_PortDirection+0x56>
    1014:	18 c0       	rjmp	.+48     	; 0x1046 <Gpio_PortDirection+0x62>
    1016:	8a e3       	ldi	r24, 0x3A	; 58
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	2a 81       	ldd	r18, Y+2	; 0x02
    101c:	fc 01       	movw	r30, r24
    101e:	20 83       	st	Z, r18
    1020:	12 c0       	rjmp	.+36     	; 0x1046 <Gpio_PortDirection+0x62>
    1022:	87 e3       	ldi	r24, 0x37	; 55
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	2a 81       	ldd	r18, Y+2	; 0x02
    1028:	fc 01       	movw	r30, r24
    102a:	20 83       	st	Z, r18
    102c:	0c c0       	rjmp	.+24     	; 0x1046 <Gpio_PortDirection+0x62>
    102e:	84 e3       	ldi	r24, 0x34	; 52
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	2a 81       	ldd	r18, Y+2	; 0x02
    1034:	fc 01       	movw	r30, r24
    1036:	20 83       	st	Z, r18
    1038:	06 c0       	rjmp	.+12     	; 0x1046 <Gpio_PortDirection+0x62>
    103a:	81 e3       	ldi	r24, 0x31	; 49
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	2a 81       	ldd	r18, Y+2	; 0x02
    1040:	fc 01       	movw	r30, r24
    1042:	20 83       	st	Z, r18
    1044:	00 00       	nop
    1046:	00 00       	nop
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	08 95       	ret

00001052 <Gpio_PinDirection>:
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	00 d0       	rcall	.+0      	; 0x1058 <Gpio_PinDirection+0x6>
    1058:	1f 92       	push	r1
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	6a 83       	std	Y+2, r22	; 0x02
    1062:	4b 83       	std	Y+3, r20	; 0x03
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	88 2f       	mov	r24, r24
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	81 30       	cpi	r24, 0x01	; 1
    106c:	91 05       	cpc	r25, r1
    106e:	81 f1       	breq	.+96     	; 0x10d0 <Gpio_PinDirection+0x7e>
    1070:	82 30       	cpi	r24, 0x02	; 2
    1072:	91 05       	cpc	r25, r1
    1074:	1c f4       	brge	.+6      	; 0x107c <Gpio_PinDirection+0x2a>
    1076:	89 2b       	or	r24, r25
    1078:	49 f0       	breq	.+18     	; 0x108c <Gpio_PinDirection+0x3a>
    107a:	90 c0       	rjmp	.+288    	; 0x119c <Gpio_PinDirection+0x14a>
    107c:	82 30       	cpi	r24, 0x02	; 2
    107e:	91 05       	cpc	r25, r1
    1080:	09 f4       	brne	.+2      	; 0x1084 <Gpio_PinDirection+0x32>
    1082:	48 c0       	rjmp	.+144    	; 0x1114 <Gpio_PinDirection+0xc2>
    1084:	03 97       	sbiw	r24, 0x03	; 3
    1086:	09 f4       	brne	.+2      	; 0x108a <Gpio_PinDirection+0x38>
    1088:	67 c0       	rjmp	.+206    	; 0x1158 <Gpio_PinDirection+0x106>
    108a:	88 c0       	rjmp	.+272    	; 0x119c <Gpio_PinDirection+0x14a>
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	88 2f       	mov	r24, r24
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	00 97       	sbiw	r24, 0x00	; 0
    1094:	21 f0       	breq	.+8      	; 0x109e <Gpio_PinDirection+0x4c>
    1096:	8f 3f       	cpi	r24, 0xFF	; 255
    1098:	91 05       	cpc	r25, r1
    109a:	71 f0       	breq	.+28     	; 0x10b8 <Gpio_PinDirection+0x66>
    109c:	7f c0       	rjmp	.+254    	; 0x119c <Gpio_PinDirection+0x14a>
    109e:	8a e3       	ldi	r24, 0x3A	; 58
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	2a e3       	ldi	r18, 0x3A	; 58
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	f9 01       	movw	r30, r18
    10a8:	20 81       	ld	r18, Z
    10aa:	32 2f       	mov	r19, r18
    10ac:	2a 81       	ldd	r18, Y+2	; 0x02
    10ae:	20 95       	com	r18
    10b0:	23 23       	and	r18, r19
    10b2:	fc 01       	movw	r30, r24
    10b4:	20 83       	st	Z, r18
    10b6:	0b c0       	rjmp	.+22     	; 0x10ce <Gpio_PinDirection+0x7c>
    10b8:	8a e3       	ldi	r24, 0x3A	; 58
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	2a e3       	ldi	r18, 0x3A	; 58
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	f9 01       	movw	r30, r18
    10c2:	30 81       	ld	r19, Z
    10c4:	2a 81       	ldd	r18, Y+2	; 0x02
    10c6:	23 2b       	or	r18, r19
    10c8:	fc 01       	movw	r30, r24
    10ca:	20 83       	st	Z, r18
    10cc:	00 00       	nop
    10ce:	66 c0       	rjmp	.+204    	; 0x119c <Gpio_PinDirection+0x14a>
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	88 2f       	mov	r24, r24
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	00 97       	sbiw	r24, 0x00	; 0
    10d8:	21 f0       	breq	.+8      	; 0x10e2 <Gpio_PinDirection+0x90>
    10da:	8f 3f       	cpi	r24, 0xFF	; 255
    10dc:	91 05       	cpc	r25, r1
    10de:	71 f0       	breq	.+28     	; 0x10fc <Gpio_PinDirection+0xaa>
    10e0:	5d c0       	rjmp	.+186    	; 0x119c <Gpio_PinDirection+0x14a>
    10e2:	87 e3       	ldi	r24, 0x37	; 55
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	27 e3       	ldi	r18, 0x37	; 55
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	f9 01       	movw	r30, r18
    10ec:	20 81       	ld	r18, Z
    10ee:	32 2f       	mov	r19, r18
    10f0:	2a 81       	ldd	r18, Y+2	; 0x02
    10f2:	20 95       	com	r18
    10f4:	23 23       	and	r18, r19
    10f6:	fc 01       	movw	r30, r24
    10f8:	20 83       	st	Z, r18
    10fa:	0b c0       	rjmp	.+22     	; 0x1112 <Gpio_PinDirection+0xc0>
    10fc:	87 e3       	ldi	r24, 0x37	; 55
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	27 e3       	ldi	r18, 0x37	; 55
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	f9 01       	movw	r30, r18
    1106:	30 81       	ld	r19, Z
    1108:	2a 81       	ldd	r18, Y+2	; 0x02
    110a:	23 2b       	or	r18, r19
    110c:	fc 01       	movw	r30, r24
    110e:	20 83       	st	Z, r18
    1110:	00 00       	nop
    1112:	44 c0       	rjmp	.+136    	; 0x119c <Gpio_PinDirection+0x14a>
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	88 2f       	mov	r24, r24
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	21 f0       	breq	.+8      	; 0x1126 <Gpio_PinDirection+0xd4>
    111e:	8f 3f       	cpi	r24, 0xFF	; 255
    1120:	91 05       	cpc	r25, r1
    1122:	71 f0       	breq	.+28     	; 0x1140 <Gpio_PinDirection+0xee>
    1124:	3b c0       	rjmp	.+118    	; 0x119c <Gpio_PinDirection+0x14a>
    1126:	84 e3       	ldi	r24, 0x34	; 52
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	24 e3       	ldi	r18, 0x34	; 52
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	f9 01       	movw	r30, r18
    1130:	20 81       	ld	r18, Z
    1132:	32 2f       	mov	r19, r18
    1134:	2a 81       	ldd	r18, Y+2	; 0x02
    1136:	20 95       	com	r18
    1138:	23 23       	and	r18, r19
    113a:	fc 01       	movw	r30, r24
    113c:	20 83       	st	Z, r18
    113e:	0b c0       	rjmp	.+22     	; 0x1156 <Gpio_PinDirection+0x104>
    1140:	84 e3       	ldi	r24, 0x34	; 52
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	24 e3       	ldi	r18, 0x34	; 52
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	f9 01       	movw	r30, r18
    114a:	30 81       	ld	r19, Z
    114c:	2a 81       	ldd	r18, Y+2	; 0x02
    114e:	23 2b       	or	r18, r19
    1150:	fc 01       	movw	r30, r24
    1152:	20 83       	st	Z, r18
    1154:	00 00       	nop
    1156:	22 c0       	rjmp	.+68     	; 0x119c <Gpio_PinDirection+0x14a>
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	00 97       	sbiw	r24, 0x00	; 0
    1160:	21 f0       	breq	.+8      	; 0x116a <Gpio_PinDirection+0x118>
    1162:	8f 3f       	cpi	r24, 0xFF	; 255
    1164:	91 05       	cpc	r25, r1
    1166:	71 f0       	breq	.+28     	; 0x1184 <Gpio_PinDirection+0x132>
    1168:	18 c0       	rjmp	.+48     	; 0x119a <Gpio_PinDirection+0x148>
    116a:	81 e3       	ldi	r24, 0x31	; 49
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	21 e3       	ldi	r18, 0x31	; 49
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	f9 01       	movw	r30, r18
    1174:	20 81       	ld	r18, Z
    1176:	32 2f       	mov	r19, r18
    1178:	2a 81       	ldd	r18, Y+2	; 0x02
    117a:	20 95       	com	r18
    117c:	23 23       	and	r18, r19
    117e:	fc 01       	movw	r30, r24
    1180:	20 83       	st	Z, r18
    1182:	0b c0       	rjmp	.+22     	; 0x119a <Gpio_PinDirection+0x148>
    1184:	81 e3       	ldi	r24, 0x31	; 49
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	21 e3       	ldi	r18, 0x31	; 49
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	f9 01       	movw	r30, r18
    118e:	30 81       	ld	r19, Z
    1190:	2a 81       	ldd	r18, Y+2	; 0x02
    1192:	23 2b       	or	r18, r19
    1194:	fc 01       	movw	r30, r24
    1196:	20 83       	st	Z, r18
    1198:	00 00       	nop
    119a:	00 00       	nop
    119c:	00 00       	nop
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	08 95       	ret

000011aa <Gpio_PinWrite>:
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	00 d0       	rcall	.+0      	; 0x11b0 <Gpio_PinWrite+0x6>
    11b0:	1f 92       	push	r1
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
    11b6:	89 83       	std	Y+1, r24	; 0x01
    11b8:	6a 83       	std	Y+2, r22	; 0x02
    11ba:	4b 83       	std	Y+3, r20	; 0x03
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	88 2f       	mov	r24, r24
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	09 f4       	brne	.+2      	; 0x11c8 <Gpio_PinWrite+0x1e>
    11c6:	42 c0       	rjmp	.+132    	; 0x124c <Gpio_PinWrite+0xa2>
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	09 f0       	breq	.+2      	; 0x11ce <Gpio_PinWrite+0x24>
    11cc:	86 c0       	rjmp	.+268    	; 0x12da <Gpio_PinWrite+0x130>
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	88 2f       	mov	r24, r24
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	91 05       	cpc	r25, r1
    11d8:	b9 f0       	breq	.+46     	; 0x1208 <Gpio_PinWrite+0x5e>
    11da:	82 30       	cpi	r24, 0x02	; 2
    11dc:	91 05       	cpc	r25, r1
    11de:	1c f4       	brge	.+6      	; 0x11e6 <Gpio_PinWrite+0x3c>
    11e0:	89 2b       	or	r24, r25
    11e2:	39 f0       	breq	.+14     	; 0x11f2 <Gpio_PinWrite+0x48>
    11e4:	7a c0       	rjmp	.+244    	; 0x12da <Gpio_PinWrite+0x130>
    11e6:	82 30       	cpi	r24, 0x02	; 2
    11e8:	91 05       	cpc	r25, r1
    11ea:	c9 f0       	breq	.+50     	; 0x121e <Gpio_PinWrite+0x74>
    11ec:	03 97       	sbiw	r24, 0x03	; 3
    11ee:	11 f1       	breq	.+68     	; 0x1234 <Gpio_PinWrite+0x8a>
    11f0:	74 c0       	rjmp	.+232    	; 0x12da <Gpio_PinWrite+0x130>
    11f2:	8b e3       	ldi	r24, 0x3B	; 59
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	2b e3       	ldi	r18, 0x3B	; 59
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	f9 01       	movw	r30, r18
    11fc:	30 81       	ld	r19, Z
    11fe:	2a 81       	ldd	r18, Y+2	; 0x02
    1200:	23 2b       	or	r18, r19
    1202:	fc 01       	movw	r30, r24
    1204:	20 83       	st	Z, r18
    1206:	21 c0       	rjmp	.+66     	; 0x124a <Gpio_PinWrite+0xa0>
    1208:	88 e3       	ldi	r24, 0x38	; 56
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	28 e3       	ldi	r18, 0x38	; 56
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	f9 01       	movw	r30, r18
    1212:	30 81       	ld	r19, Z
    1214:	2a 81       	ldd	r18, Y+2	; 0x02
    1216:	23 2b       	or	r18, r19
    1218:	fc 01       	movw	r30, r24
    121a:	20 83       	st	Z, r18
    121c:	16 c0       	rjmp	.+44     	; 0x124a <Gpio_PinWrite+0xa0>
    121e:	85 e3       	ldi	r24, 0x35	; 53
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	25 e3       	ldi	r18, 0x35	; 53
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	f9 01       	movw	r30, r18
    1228:	30 81       	ld	r19, Z
    122a:	2a 81       	ldd	r18, Y+2	; 0x02
    122c:	23 2b       	or	r18, r19
    122e:	fc 01       	movw	r30, r24
    1230:	20 83       	st	Z, r18
    1232:	0b c0       	rjmp	.+22     	; 0x124a <Gpio_PinWrite+0xa0>
    1234:	82 e3       	ldi	r24, 0x32	; 50
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	22 e3       	ldi	r18, 0x32	; 50
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	f9 01       	movw	r30, r18
    123e:	30 81       	ld	r19, Z
    1240:	2a 81       	ldd	r18, Y+2	; 0x02
    1242:	23 2b       	or	r18, r19
    1244:	fc 01       	movw	r30, r24
    1246:	20 83       	st	Z, r18
    1248:	00 00       	nop
    124a:	47 c0       	rjmp	.+142    	; 0x12da <Gpio_PinWrite+0x130>
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	88 2f       	mov	r24, r24
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	91 05       	cpc	r25, r1
    1256:	c9 f0       	breq	.+50     	; 0x128a <Gpio_PinWrite+0xe0>
    1258:	82 30       	cpi	r24, 0x02	; 2
    125a:	91 05       	cpc	r25, r1
    125c:	1c f4       	brge	.+6      	; 0x1264 <Gpio_PinWrite+0xba>
    125e:	89 2b       	or	r24, r25
    1260:	39 f0       	breq	.+14     	; 0x1270 <Gpio_PinWrite+0xc6>
    1262:	3a c0       	rjmp	.+116    	; 0x12d8 <Gpio_PinWrite+0x12e>
    1264:	82 30       	cpi	r24, 0x02	; 2
    1266:	91 05       	cpc	r25, r1
    1268:	e9 f0       	breq	.+58     	; 0x12a4 <Gpio_PinWrite+0xfa>
    126a:	03 97       	sbiw	r24, 0x03	; 3
    126c:	41 f1       	breq	.+80     	; 0x12be <Gpio_PinWrite+0x114>
    126e:	34 c0       	rjmp	.+104    	; 0x12d8 <Gpio_PinWrite+0x12e>
    1270:	8b e3       	ldi	r24, 0x3B	; 59
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	2b e3       	ldi	r18, 0x3B	; 59
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	f9 01       	movw	r30, r18
    127a:	20 81       	ld	r18, Z
    127c:	32 2f       	mov	r19, r18
    127e:	2a 81       	ldd	r18, Y+2	; 0x02
    1280:	20 95       	com	r18
    1282:	23 23       	and	r18, r19
    1284:	fc 01       	movw	r30, r24
    1286:	20 83       	st	Z, r18
    1288:	27 c0       	rjmp	.+78     	; 0x12d8 <Gpio_PinWrite+0x12e>
    128a:	88 e3       	ldi	r24, 0x38	; 56
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	28 e3       	ldi	r18, 0x38	; 56
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	f9 01       	movw	r30, r18
    1294:	20 81       	ld	r18, Z
    1296:	32 2f       	mov	r19, r18
    1298:	2a 81       	ldd	r18, Y+2	; 0x02
    129a:	20 95       	com	r18
    129c:	23 23       	and	r18, r19
    129e:	fc 01       	movw	r30, r24
    12a0:	20 83       	st	Z, r18
    12a2:	1a c0       	rjmp	.+52     	; 0x12d8 <Gpio_PinWrite+0x12e>
    12a4:	85 e3       	ldi	r24, 0x35	; 53
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	25 e3       	ldi	r18, 0x35	; 53
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	f9 01       	movw	r30, r18
    12ae:	20 81       	ld	r18, Z
    12b0:	32 2f       	mov	r19, r18
    12b2:	2a 81       	ldd	r18, Y+2	; 0x02
    12b4:	20 95       	com	r18
    12b6:	23 23       	and	r18, r19
    12b8:	fc 01       	movw	r30, r24
    12ba:	20 83       	st	Z, r18
    12bc:	0d c0       	rjmp	.+26     	; 0x12d8 <Gpio_PinWrite+0x12e>
    12be:	82 e3       	ldi	r24, 0x32	; 50
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	22 e3       	ldi	r18, 0x32	; 50
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	f9 01       	movw	r30, r18
    12c8:	20 81       	ld	r18, Z
    12ca:	32 2f       	mov	r19, r18
    12cc:	2a 81       	ldd	r18, Y+2	; 0x02
    12ce:	20 95       	com	r18
    12d0:	23 23       	and	r18, r19
    12d2:	fc 01       	movw	r30, r24
    12d4:	20 83       	st	Z, r18
    12d6:	00 00       	nop
    12d8:	00 00       	nop
    12da:	00 00       	nop
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	08 95       	ret

000012e8 <Gpio_PinRead>:
 * @param port : the port that includes the pin {MYPORTA,MYPORTB,MYPORTC,MYPORTD}
 * @param pins : the pin Number {BIT0,BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7}
 * Return : the value Read by the function 
 */
uint8 Gpio_PinRead(uint8 port, uint8 pin)
{
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <Gpio_PinRead+0x6>
    12ee:	1f 92       	push	r1
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	8a 83       	std	Y+2, r24	; 0x02
    12f6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 result = 0;
    12f8:	19 82       	std	Y+1, r1	; 0x01
	switch(port)
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	88 2f       	mov	r24, r24
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	81 30       	cpi	r24, 0x01	; 1
    1302:	91 05       	cpc	r25, r1
    1304:	e9 f0       	breq	.+58     	; 0x1340 <Gpio_PinRead+0x58>
    1306:	82 30       	cpi	r24, 0x02	; 2
    1308:	91 05       	cpc	r25, r1
    130a:	1c f4       	brge	.+6      	; 0x1312 <Gpio_PinRead+0x2a>
    130c:	89 2b       	or	r24, r25
    130e:	39 f0       	breq	.+14     	; 0x131e <Gpio_PinRead+0x36>
    1310:	4a c0       	rjmp	.+148    	; 0x13a6 <Gpio_PinRead+0xbe>
    1312:	82 30       	cpi	r24, 0x02	; 2
    1314:	91 05       	cpc	r25, r1
    1316:	29 f1       	breq	.+74     	; 0x1362 <Gpio_PinRead+0x7a>
    1318:	03 97       	sbiw	r24, 0x03	; 3
    131a:	a1 f1       	breq	.+104    	; 0x1384 <Gpio_PinRead+0x9c>
    131c:	44 c0       	rjmp	.+136    	; 0x13a6 <Gpio_PinRead+0xbe>
	{
		case MYPORTA :
		result = ((PIN_A >> pin) & 0x01);
    131e:	89 e3       	ldi	r24, 0x39	; 57
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	fc 01       	movw	r30, r24
    1324:	80 81       	ld	r24, Z
    1326:	88 2f       	mov	r24, r24
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	2b 81       	ldd	r18, Y+3	; 0x03
    132c:	22 2f       	mov	r18, r18
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <Gpio_PinRead+0x4e>
    1332:	95 95       	asr	r25
    1334:	87 95       	ror	r24
    1336:	2a 95       	dec	r18
    1338:	e2 f7       	brpl	.-8      	; 0x1332 <Gpio_PinRead+0x4a>
    133a:	81 70       	andi	r24, 0x01	; 1
    133c:	89 83       	std	Y+1, r24	; 0x01
		break;
    133e:	33 c0       	rjmp	.+102    	; 0x13a6 <Gpio_PinRead+0xbe>
		case MYPORTB :
		result = ((PIN_B >> pin) & 0x01);
    1340:	86 e3       	ldi	r24, 0x36	; 54
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	fc 01       	movw	r30, r24
    1346:	80 81       	ld	r24, Z
    1348:	88 2f       	mov	r24, r24
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	2b 81       	ldd	r18, Y+3	; 0x03
    134e:	22 2f       	mov	r18, r18
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <Gpio_PinRead+0x70>
    1354:	95 95       	asr	r25
    1356:	87 95       	ror	r24
    1358:	2a 95       	dec	r18
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <Gpio_PinRead+0x6c>
    135c:	81 70       	andi	r24, 0x01	; 1
    135e:	89 83       	std	Y+1, r24	; 0x01
		break;
    1360:	22 c0       	rjmp	.+68     	; 0x13a6 <Gpio_PinRead+0xbe>
		case MYPORTC :
		result = ((PIN_C >> pin) & 0x01);
    1362:	83 e3       	ldi	r24, 0x33	; 51
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	fc 01       	movw	r30, r24
    1368:	80 81       	ld	r24, Z
    136a:	88 2f       	mov	r24, r24
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	2b 81       	ldd	r18, Y+3	; 0x03
    1370:	22 2f       	mov	r18, r18
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	02 c0       	rjmp	.+4      	; 0x137a <Gpio_PinRead+0x92>
    1376:	95 95       	asr	r25
    1378:	87 95       	ror	r24
    137a:	2a 95       	dec	r18
    137c:	e2 f7       	brpl	.-8      	; 0x1376 <Gpio_PinRead+0x8e>
    137e:	81 70       	andi	r24, 0x01	; 1
    1380:	89 83       	std	Y+1, r24	; 0x01
		break;
    1382:	11 c0       	rjmp	.+34     	; 0x13a6 <Gpio_PinRead+0xbe>
		case MYPORTD :
		result = ((PIN_D >> pin) & 0x01);
    1384:	80 e3       	ldi	r24, 0x30	; 48
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	fc 01       	movw	r30, r24
    138a:	80 81       	ld	r24, Z
    138c:	88 2f       	mov	r24, r24
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	2b 81       	ldd	r18, Y+3	; 0x03
    1392:	22 2f       	mov	r18, r18
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	02 c0       	rjmp	.+4      	; 0x139c <Gpio_PinRead+0xb4>
    1398:	95 95       	asr	r25
    139a:	87 95       	ror	r24
    139c:	2a 95       	dec	r18
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <Gpio_PinRead+0xb0>
    13a0:	81 70       	andi	r24, 0x01	; 1
    13a2:	89 83       	std	Y+1, r24	; 0x01
		break;
    13a4:	00 00       	nop
	}
	return result;
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	08 95       	ret

000013b4 <Interrupts_On>:
 * Return : the function Returns nothing
 */
void interrupts_Off(void)
{    
	CLR_BIT(SREG,GIE);
}
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	8f e5       	ldi	r24, 0x5F	; 95
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	2f e5       	ldi	r18, 0x5F	; 95
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	f9 01       	movw	r30, r18
    13c6:	20 81       	ld	r18, Z
    13c8:	20 68       	ori	r18, 0x80	; 128
    13ca:	fc 01       	movw	r30, r24
    13cc:	20 83       	st	Z, r18
    13ce:	00 00       	nop
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	08 95       	ret

000013d6 <Interrupts_ExtInt_Init>:
					ex: [LOW_LEVEL,ANY_CHANGE,FALLING_EDGE,RISING_EDGE]
					Note : INT2 only works in the edge mode [FALLING_EDGE,RISING_EDGE]
 * Return : the function Returns nothing
 */
void Interrupts_ExtInt_Init(uint8 extInt , uint8 cfg)
{	
    13d6:	cf 93       	push	r28
    13d8:	df 93       	push	r29
    13da:	00 d0       	rcall	.+0      	; 0x13dc <Interrupts_ExtInt_Init+0x6>
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    13e0:	89 83       	std	Y+1, r24	; 0x01
    13e2:	6a 83       	std	Y+2, r22	; 0x02
	switch(extInt)
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	88 2f       	mov	r24, r24
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	86 30       	cpi	r24, 0x06	; 6
    13ec:	91 05       	cpc	r25, r1
    13ee:	41 f0       	breq	.+16     	; 0x1400 <Interrupts_ExtInt_Init+0x2a>
    13f0:	87 30       	cpi	r24, 0x07	; 7
    13f2:	91 05       	cpc	r25, r1
    13f4:	09 f4       	brne	.+2      	; 0x13f8 <Interrupts_ExtInt_Init+0x22>
    13f6:	88 c0       	rjmp	.+272    	; 0x1508 <Interrupts_ExtInt_Init+0x132>
    13f8:	05 97       	sbiw	r24, 0x05	; 5
    13fa:	09 f4       	brne	.+2      	; 0x13fe <Interrupts_ExtInt_Init+0x28>
    13fc:	09 c1       	rjmp	.+530    	; 0x1610 <Interrupts_ExtInt_Init+0x23a>
		case INT2 :
		SET_BIT(GICR,INT2);
		break;
		
		default: 
		break;
    13fe:	12 c1       	rjmp	.+548    	; 0x1624 <Interrupts_ExtInt_Init+0x24e>
void Interrupts_ExtInt_Init(uint8 extInt , uint8 cfg)
{	
	switch(extInt)
	{
		case INT0 : 
		switch(cfg)
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	88 2f       	mov	r24, r24
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	81 30       	cpi	r24, 0x01	; 1
    1408:	91 05       	cpc	r25, r1
    140a:	49 f1       	breq	.+82     	; 0x145e <Interrupts_ExtInt_Init+0x88>
    140c:	82 30       	cpi	r24, 0x02	; 2
    140e:	91 05       	cpc	r25, r1
    1410:	1c f4       	brge	.+6      	; 0x1418 <Interrupts_ExtInt_Init+0x42>
    1412:	89 2b       	or	r24, r25
    1414:	41 f0       	breq	.+16     	; 0x1426 <Interrupts_ExtInt_Init+0x50>
		SET_BIT(MCUCR,ISC01);
		SET_BIT(MCUCR,ISC00);
		break;
		
		default:
		break;
    1416:	77 c0       	rjmp	.+238    	; 0x1506 <Interrupts_ExtInt_Init+0x130>
void Interrupts_ExtInt_Init(uint8 extInt , uint8 cfg)
{	
	switch(extInt)
	{
		case INT0 : 
		switch(cfg)
    1418:	82 30       	cpi	r24, 0x02	; 2
    141a:	91 05       	cpc	r25, r1
    141c:	e1 f1       	breq	.+120    	; 0x1496 <Interrupts_ExtInt_Init+0xc0>
    141e:	03 97       	sbiw	r24, 0x03	; 3
    1420:	09 f4       	brne	.+2      	; 0x1424 <Interrupts_ExtInt_Init+0x4e>
    1422:	55 c0       	rjmp	.+170    	; 0x14ce <Interrupts_ExtInt_Init+0xf8>
		SET_BIT(MCUCR,ISC01);
		SET_BIT(MCUCR,ISC00);
		break;
		
		default:
		break;
    1424:	70 c0       	rjmp	.+224    	; 0x1506 <Interrupts_ExtInt_Init+0x130>
		case INT0 : 
		switch(cfg)
		{
		
		case LOW_LEVEL :
		SET_BIT(GICR,INT0);
    1426:	8b e5       	ldi	r24, 0x5B	; 91
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	2b e5       	ldi	r18, 0x5B	; 91
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	f9 01       	movw	r30, r18
    1430:	20 81       	ld	r18, Z
    1432:	20 64       	ori	r18, 0x40	; 64
    1434:	fc 01       	movw	r30, r24
    1436:	20 83       	st	Z, r18
		CLR_BIT(MCUCR,ISC00);
    1438:	85 e5       	ldi	r24, 0x55	; 85
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	25 e5       	ldi	r18, 0x55	; 85
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	f9 01       	movw	r30, r18
    1442:	20 81       	ld	r18, Z
    1444:	2e 7f       	andi	r18, 0xFE	; 254
    1446:	fc 01       	movw	r30, r24
    1448:	20 83       	st	Z, r18
		CLR_BIT(MCUCR,ISC01);
    144a:	85 e5       	ldi	r24, 0x55	; 85
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	25 e5       	ldi	r18, 0x55	; 85
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	f9 01       	movw	r30, r18
    1454:	20 81       	ld	r18, Z
    1456:	2d 7f       	andi	r18, 0xFD	; 253
    1458:	fc 01       	movw	r30, r24
    145a:	20 83       	st	Z, r18
		break;
    145c:	54 c0       	rjmp	.+168    	; 0x1506 <Interrupts_ExtInt_Init+0x130>
		
		case ANY_CHANGE :
		SET_BIT(GICR,INT0);
    145e:	8b e5       	ldi	r24, 0x5B	; 91
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	2b e5       	ldi	r18, 0x5B	; 91
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	f9 01       	movw	r30, r18
    1468:	20 81       	ld	r18, Z
    146a:	20 64       	ori	r18, 0x40	; 64
    146c:	fc 01       	movw	r30, r24
    146e:	20 83       	st	Z, r18
		SET_BIT(MCUCR,ISC00);
    1470:	85 e5       	ldi	r24, 0x55	; 85
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	25 e5       	ldi	r18, 0x55	; 85
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	f9 01       	movw	r30, r18
    147a:	20 81       	ld	r18, Z
    147c:	21 60       	ori	r18, 0x01	; 1
    147e:	fc 01       	movw	r30, r24
    1480:	20 83       	st	Z, r18
		CLR_BIT(MCUCR,ISC01);
    1482:	85 e5       	ldi	r24, 0x55	; 85
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	25 e5       	ldi	r18, 0x55	; 85
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	f9 01       	movw	r30, r18
    148c:	20 81       	ld	r18, Z
    148e:	2d 7f       	andi	r18, 0xFD	; 253
    1490:	fc 01       	movw	r30, r24
    1492:	20 83       	st	Z, r18
		break;
    1494:	38 c0       	rjmp	.+112    	; 0x1506 <Interrupts_ExtInt_Init+0x130>
		
		case FALLING_EDGE :
		SET_BIT(GICR,INT0);
    1496:	8b e5       	ldi	r24, 0x5B	; 91
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	2b e5       	ldi	r18, 0x5B	; 91
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	f9 01       	movw	r30, r18
    14a0:	20 81       	ld	r18, Z
    14a2:	20 64       	ori	r18, 0x40	; 64
    14a4:	fc 01       	movw	r30, r24
    14a6:	20 83       	st	Z, r18
		SET_BIT(MCUCR,ISC01);
    14a8:	85 e5       	ldi	r24, 0x55	; 85
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	25 e5       	ldi	r18, 0x55	; 85
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	f9 01       	movw	r30, r18
    14b2:	20 81       	ld	r18, Z
    14b4:	22 60       	ori	r18, 0x02	; 2
    14b6:	fc 01       	movw	r30, r24
    14b8:	20 83       	st	Z, r18
		CLR_BIT(MCUCR,ISC00);
    14ba:	85 e5       	ldi	r24, 0x55	; 85
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	25 e5       	ldi	r18, 0x55	; 85
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	f9 01       	movw	r30, r18
    14c4:	20 81       	ld	r18, Z
    14c6:	2e 7f       	andi	r18, 0xFE	; 254
    14c8:	fc 01       	movw	r30, r24
    14ca:	20 83       	st	Z, r18
		break;
    14cc:	1c c0       	rjmp	.+56     	; 0x1506 <Interrupts_ExtInt_Init+0x130>
		
		case RISING_EDGE :
		SET_BIT(GICR,INT0);
    14ce:	8b e5       	ldi	r24, 0x5B	; 91
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	2b e5       	ldi	r18, 0x5B	; 91
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	f9 01       	movw	r30, r18
    14d8:	20 81       	ld	r18, Z
    14da:	20 64       	ori	r18, 0x40	; 64
    14dc:	fc 01       	movw	r30, r24
    14de:	20 83       	st	Z, r18
		SET_BIT(MCUCR,ISC01);
    14e0:	85 e5       	ldi	r24, 0x55	; 85
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	25 e5       	ldi	r18, 0x55	; 85
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	f9 01       	movw	r30, r18
    14ea:	20 81       	ld	r18, Z
    14ec:	22 60       	ori	r18, 0x02	; 2
    14ee:	fc 01       	movw	r30, r24
    14f0:	20 83       	st	Z, r18
		SET_BIT(MCUCR,ISC00);
    14f2:	85 e5       	ldi	r24, 0x55	; 85
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	25 e5       	ldi	r18, 0x55	; 85
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	f9 01       	movw	r30, r18
    14fc:	20 81       	ld	r18, Z
    14fe:	21 60       	ori	r18, 0x01	; 1
    1500:	fc 01       	movw	r30, r24
    1502:	20 83       	st	Z, r18
		break;
    1504:	00 00       	nop
		default:
		break;
		
		}
		
		break;
    1506:	8e c0       	rjmp	.+284    	; 0x1624 <Interrupts_ExtInt_Init+0x24e>
		
		case INT1 :
		switch(cfg)
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	88 2f       	mov	r24, r24
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	81 30       	cpi	r24, 0x01	; 1
    1510:	91 05       	cpc	r25, r1
    1512:	49 f1       	breq	.+82     	; 0x1566 <Interrupts_ExtInt_Init+0x190>
    1514:	82 30       	cpi	r24, 0x02	; 2
    1516:	91 05       	cpc	r25, r1
    1518:	1c f4       	brge	.+6      	; 0x1520 <Interrupts_ExtInt_Init+0x14a>
    151a:	89 2b       	or	r24, r25
    151c:	41 f0       	breq	.+16     	; 0x152e <Interrupts_ExtInt_Init+0x158>
		SET_BIT(MCUCR,ISC11);
		SET_BIT(MCUCR,ISC10);
		break;
		
		default:
		break;
    151e:	77 c0       	rjmp	.+238    	; 0x160e <Interrupts_ExtInt_Init+0x238>
		}
		
		break;
		
		case INT1 :
		switch(cfg)
    1520:	82 30       	cpi	r24, 0x02	; 2
    1522:	91 05       	cpc	r25, r1
    1524:	e1 f1       	breq	.+120    	; 0x159e <Interrupts_ExtInt_Init+0x1c8>
    1526:	03 97       	sbiw	r24, 0x03	; 3
    1528:	09 f4       	brne	.+2      	; 0x152c <Interrupts_ExtInt_Init+0x156>
    152a:	55 c0       	rjmp	.+170    	; 0x15d6 <Interrupts_ExtInt_Init+0x200>
		SET_BIT(MCUCR,ISC11);
		SET_BIT(MCUCR,ISC10);
		break;
		
		default:
		break;
    152c:	70 c0       	rjmp	.+224    	; 0x160e <Interrupts_ExtInt_Init+0x238>
		case INT1 :
		switch(cfg)
		{
		
		case LOW_LEVEL :
		SET_BIT(GICR,INT1);
    152e:	8b e5       	ldi	r24, 0x5B	; 91
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	2b e5       	ldi	r18, 0x5B	; 91
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	f9 01       	movw	r30, r18
    1538:	20 81       	ld	r18, Z
    153a:	20 68       	ori	r18, 0x80	; 128
    153c:	fc 01       	movw	r30, r24
    153e:	20 83       	st	Z, r18
		CLR_BIT(MCUCR,ISC10);
    1540:	85 e5       	ldi	r24, 0x55	; 85
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	25 e5       	ldi	r18, 0x55	; 85
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	f9 01       	movw	r30, r18
    154a:	20 81       	ld	r18, Z
    154c:	2b 7f       	andi	r18, 0xFB	; 251
    154e:	fc 01       	movw	r30, r24
    1550:	20 83       	st	Z, r18
		CLR_BIT(MCUCR,ISC11);
    1552:	85 e5       	ldi	r24, 0x55	; 85
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	25 e5       	ldi	r18, 0x55	; 85
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	f9 01       	movw	r30, r18
    155c:	20 81       	ld	r18, Z
    155e:	27 7f       	andi	r18, 0xF7	; 247
    1560:	fc 01       	movw	r30, r24
    1562:	20 83       	st	Z, r18
		break;
    1564:	54 c0       	rjmp	.+168    	; 0x160e <Interrupts_ExtInt_Init+0x238>
		
		case ANY_CHANGE :
		SET_BIT(GICR,INT1);
    1566:	8b e5       	ldi	r24, 0x5B	; 91
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	2b e5       	ldi	r18, 0x5B	; 91
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	f9 01       	movw	r30, r18
    1570:	20 81       	ld	r18, Z
    1572:	20 68       	ori	r18, 0x80	; 128
    1574:	fc 01       	movw	r30, r24
    1576:	20 83       	st	Z, r18
		SET_BIT(MCUCR,ISC10);
    1578:	85 e5       	ldi	r24, 0x55	; 85
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	25 e5       	ldi	r18, 0x55	; 85
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	f9 01       	movw	r30, r18
    1582:	20 81       	ld	r18, Z
    1584:	24 60       	ori	r18, 0x04	; 4
    1586:	fc 01       	movw	r30, r24
    1588:	20 83       	st	Z, r18
		CLR_BIT(MCUCR,ISC11);
    158a:	85 e5       	ldi	r24, 0x55	; 85
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	25 e5       	ldi	r18, 0x55	; 85
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	f9 01       	movw	r30, r18
    1594:	20 81       	ld	r18, Z
    1596:	27 7f       	andi	r18, 0xF7	; 247
    1598:	fc 01       	movw	r30, r24
    159a:	20 83       	st	Z, r18
		break;
    159c:	38 c0       	rjmp	.+112    	; 0x160e <Interrupts_ExtInt_Init+0x238>
		
		case FALLING_EDGE :
		SET_BIT(GICR,INT1);
    159e:	8b e5       	ldi	r24, 0x5B	; 91
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	2b e5       	ldi	r18, 0x5B	; 91
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	f9 01       	movw	r30, r18
    15a8:	20 81       	ld	r18, Z
    15aa:	20 68       	ori	r18, 0x80	; 128
    15ac:	fc 01       	movw	r30, r24
    15ae:	20 83       	st	Z, r18
		SET_BIT(MCUCR,ISC11);
    15b0:	85 e5       	ldi	r24, 0x55	; 85
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	25 e5       	ldi	r18, 0x55	; 85
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	f9 01       	movw	r30, r18
    15ba:	20 81       	ld	r18, Z
    15bc:	28 60       	ori	r18, 0x08	; 8
    15be:	fc 01       	movw	r30, r24
    15c0:	20 83       	st	Z, r18
		CLR_BIT(MCUCR,ISC10);
    15c2:	85 e5       	ldi	r24, 0x55	; 85
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	25 e5       	ldi	r18, 0x55	; 85
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	f9 01       	movw	r30, r18
    15cc:	20 81       	ld	r18, Z
    15ce:	2b 7f       	andi	r18, 0xFB	; 251
    15d0:	fc 01       	movw	r30, r24
    15d2:	20 83       	st	Z, r18
		break;
    15d4:	1c c0       	rjmp	.+56     	; 0x160e <Interrupts_ExtInt_Init+0x238>
		
		case RISING_EDGE :
		SET_BIT(GICR,INT1);
    15d6:	8b e5       	ldi	r24, 0x5B	; 91
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	2b e5       	ldi	r18, 0x5B	; 91
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	f9 01       	movw	r30, r18
    15e0:	20 81       	ld	r18, Z
    15e2:	20 68       	ori	r18, 0x80	; 128
    15e4:	fc 01       	movw	r30, r24
    15e6:	20 83       	st	Z, r18
		SET_BIT(MCUCR,ISC11);
    15e8:	85 e5       	ldi	r24, 0x55	; 85
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	25 e5       	ldi	r18, 0x55	; 85
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	f9 01       	movw	r30, r18
    15f2:	20 81       	ld	r18, Z
    15f4:	28 60       	ori	r18, 0x08	; 8
    15f6:	fc 01       	movw	r30, r24
    15f8:	20 83       	st	Z, r18
		SET_BIT(MCUCR,ISC10);
    15fa:	85 e5       	ldi	r24, 0x55	; 85
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	25 e5       	ldi	r18, 0x55	; 85
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	f9 01       	movw	r30, r18
    1604:	20 81       	ld	r18, Z
    1606:	24 60       	ori	r18, 0x04	; 4
    1608:	fc 01       	movw	r30, r24
    160a:	20 83       	st	Z, r18
		break;
    160c:	00 00       	nop
		
		default:
		break;
		
		}
		break;
    160e:	0a c0       	rjmp	.+20     	; 0x1624 <Interrupts_ExtInt_Init+0x24e>
		
		case INT2 :
		SET_BIT(GICR,INT2);
    1610:	8b e5       	ldi	r24, 0x5B	; 91
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	2b e5       	ldi	r18, 0x5B	; 91
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	f9 01       	movw	r30, r18
    161a:	20 81       	ld	r18, Z
    161c:	20 62       	ori	r18, 0x20	; 32
    161e:	fc 01       	movw	r30, r24
    1620:	20 83       	st	Z, r18
		break;
    1622:	00 00       	nop
		
		default: 
		break;
	}
    1624:	00 00       	nop
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	08 95       	ret

00001630 <PWM_Init>:
 * Description: PWM_PhaseCorrect is a function to initiate a PWM on a GPIO pin OC1 
 * @param dutyCycle the duty cycle of the PWM in percentage
 * @param freq the frequency of the PWM in Hz
 */

void PWM_Init( uint8 ch_no){
    1630:	cf 93       	push	r28
    1632:	df 93       	push	r29
    1634:	1f 92       	push	r1
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	89 83       	std	Y+1, r24	; 0x01
	Gpio_PinDirection(MYPORTD,BIT7,SET_OUT);
    163c:	4f ef       	ldi	r20, 0xFF	; 255
    163e:	60 e8       	ldi	r22, 0x80	; 128
    1640:	83 e0       	ldi	r24, 0x03	; 3
    1642:	0e 94 29 08 	call	0x1052	; 0x1052 <Gpio_PinDirection>
	switch(ch_no)
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	88 2f       	mov	r24, r24
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	81 30       	cpi	r24, 0x01	; 1
    164e:	91 05       	cpc	r25, r1
    1650:	51 f0       	breq	.+20     	; 0x1666 <PWM_Init+0x36>
    1652:	82 30       	cpi	r24, 0x02	; 2
    1654:	91 05       	cpc	r25, r1
    1656:	61 f0       	breq	.+24     	; 0x1670 <PWM_Init+0x40>
    1658:	89 2b       	or	r24, r25
    165a:	a1 f4       	brne	.+40     	; 0x1684 <PWM_Init+0x54>
	{
		case TIMER0:
		Timers_Init(&timer0_cfg_s);
    165c:	83 e6       	ldi	r24, 0x63	; 99
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	0e 94 8d 0b 	call	0x171a	; 0x171a <Timers_Init>
		break;
    1664:	0f c0       	rjmp	.+30     	; 0x1684 <PWM_Init+0x54>
		case TIMER1:
		Timers_Init(&timer1_cfg_s);
    1666:	8e e6       	ldi	r24, 0x6E	; 110
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	0e 94 8d 0b 	call	0x171a	; 0x171a <Timers_Init>
		break;
    166e:	0a c0       	rjmp	.+20     	; 0x1684 <PWM_Init+0x54>
		case TIMER2:
		Timers_Init(&timer2_cfg_s);
    1670:	89 e7       	ldi	r24, 0x79	; 121
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0e 94 8d 0b 	call	0x171a	; 0x171a <Timers_Init>
		Gpio_PinDirection(MYPORTD,BIT7,SET_OUT);
    1678:	4f ef       	ldi	r20, 0xFF	; 255
    167a:	60 e8       	ldi	r22, 0x80	; 128
    167c:	83 e0       	ldi	r24, 0x03	; 3
    167e:	0e 94 29 08 	call	0x1052	; 0x1052 <Gpio_PinDirection>
		break;
    1682:	00 00       	nop
	}
	Timers_Start(ch_no);
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <Timers_Start>
}
    168a:	00 00       	nop
    168c:	0f 90       	pop	r0
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	08 95       	ret

00001694 <PWM_PhaseCorrect>:
 * @param dutyCycle the duty cycle of the PWM in percentage
 * @param freq the frequency of the PWM in Hz
 */

void PWM_PhaseCorrect( uint8 dutycycle)
{
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	00 d0       	rcall	.+0      	; 0x169a <PWM_PhaseCorrect+0x6>
    169a:	1f 92       	push	r1
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
    16a0:	8b 83       	std	Y+3, r24	; 0x03
	uint8 TOP_Value;
	uint8 Compare_Value;
	TOP_Value = F_CPU / ( 2 * 10000 * Gv_PrescallerTimer2_AbsoluteValue);
    16a2:	40 91 ba 00 	lds	r20, 0x00BA	; 0x8000ba <Gv_PrescallerTimer2_AbsoluteValue>
    16a6:	50 91 bb 00 	lds	r21, 0x00BB	; 0x8000bb <Gv_PrescallerTimer2_AbsoluteValue+0x1>
    16aa:	20 e2       	ldi	r18, 0x20	; 32
    16ac:	3e e4       	ldi	r19, 0x4E	; 78
    16ae:	42 9f       	mul	r20, r18
    16b0:	c0 01       	movw	r24, r0
    16b2:	43 9f       	mul	r20, r19
    16b4:	90 0d       	add	r25, r0
    16b6:	52 9f       	mul	r21, r18
    16b8:	90 0d       	add	r25, r0
    16ba:	11 24       	eor	r1, r1
    16bc:	9c 01       	movw	r18, r24
    16be:	40 e0       	ldi	r20, 0x00	; 0
    16c0:	50 e0       	ldi	r21, 0x00	; 0
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	92 e1       	ldi	r25, 0x12	; 18
    16c6:	aa e7       	ldi	r26, 0x7A	; 122
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	bc 01       	movw	r22, r24
    16cc:	cd 01       	movw	r24, r26
    16ce:	0e 94 4d 11 	call	0x229a	; 0x229a <__udivmodsi4>
    16d2:	da 01       	movw	r26, r20
    16d4:	c9 01       	movw	r24, r18
    16d6:	89 83       	std	Y+1, r24	; 0x01
	Compare_Value = (TOP_Value*dutycycle) / DUTY_CYCLE_PERCENTAGE_FACTOR;
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	88 2f       	mov	r24, r24
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	28 9f       	mul	r18, r24
    16e6:	a0 01       	movw	r20, r0
    16e8:	29 9f       	mul	r18, r25
    16ea:	50 0d       	add	r21, r0
    16ec:	38 9f       	mul	r19, r24
    16ee:	50 0d       	add	r21, r0
    16f0:	11 24       	eor	r1, r1
    16f2:	24 e6       	ldi	r18, 0x64	; 100
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	ca 01       	movw	r24, r20
    16f8:	b9 01       	movw	r22, r18
    16fa:	0e 94 39 11 	call	0x2272	; 0x2272 <__divmodhi4>
    16fe:	cb 01       	movw	r24, r22
    1700:	8a 83       	std	Y+2, r24	; 0x02
	OCR2 = 200;//(uint8)(Compare_Value);
    1702:	83 e4       	ldi	r24, 0x43	; 67
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	28 ec       	ldi	r18, 0xC8	; 200
    1708:	fc 01       	movw	r30, r24
    170a:	20 83       	st	Z, r18
    170c:	00 00       	nop
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	08 95       	ret

0000171a <Timers_Init>:
	{
		Gpio_PinWrite(SWPWM_2_PORT,SWPWM_2_PIN,TRUE);
		Timers_timer2_Delay_ns(time_On_ns);
		Gpio_PinWrite(SWPWM_2_PORT,SWPWM_2_PIN,FALSE);
		Timers_timer2_Delay_ns(time_Off_ns);
	}
    171a:	cf 93       	push	r28
    171c:	df 93       	push	r29
    171e:	00 d0       	rcall	.+0      	; 0x1720 <Timers_Init+0x6>
    1720:	1f 92       	push	r1
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
    1726:	9b 83       	std	Y+3, r25	; 0x03
    1728:	8a 83       	std	Y+2, r24	; 0x02
    172a:	19 82       	std	Y+1, r1	; 0x01
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	9b 81       	ldd	r25, Y+3	; 0x03
    1730:	fc 01       	movw	r30, r24
    1732:	87 81       	ldd	r24, Z+7	; 0x07
    1734:	90 85       	ldd	r25, Z+8	; 0x08
    1736:	a1 85       	ldd	r26, Z+9	; 0x09
    1738:	b2 85       	ldd	r27, Z+10	; 0x0a
    173a:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <Gv_F_CPU>
    173e:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <Gv_F_CPU+0x1>
    1742:	a0 93 b1 00 	sts	0x00B1, r26	; 0x8000b1 <Gv_F_CPU+0x2>
    1746:	b0 93 b2 00 	sts	0x00B2, r27	; 0x8000b2 <Gv_F_CPU+0x3>
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	9b 81       	ldd	r25, Y+3	; 0x03
    174e:	fc 01       	movw	r30, r24
    1750:	80 81       	ld	r24, Z
    1752:	88 2f       	mov	r24, r24
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	81 30       	cpi	r24, 0x01	; 1
    1758:	91 05       	cpc	r25, r1
    175a:	09 f4       	brne	.+2      	; 0x175e <Timers_Init+0x44>
    175c:	64 c0       	rjmp	.+200    	; 0x1826 <Timers_Init+0x10c>
    175e:	82 30       	cpi	r24, 0x02	; 2
    1760:	91 05       	cpc	r25, r1
    1762:	09 f4       	brne	.+2      	; 0x1766 <Timers_Init+0x4c>
    1764:	ca c0       	rjmp	.+404    	; 0x18fa <Timers_Init+0x1e0>
    1766:	89 2b       	or	r24, r25
    1768:	09 f0       	breq	.+2      	; 0x176c <Timers_Init+0x52>
    176a:	24 c1       	rjmp	.+584    	; 0x19b4 <Timers_Init+0x29a>
    176c:	83 e5       	ldi	r24, 0x53	; 83
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	23 e5       	ldi	r18, 0x53	; 83
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	f9 01       	movw	r30, r18
    1776:	40 81       	ld	r20, Z
    1778:	2a 81       	ldd	r18, Y+2	; 0x02
    177a:	3b 81       	ldd	r19, Y+3	; 0x03
    177c:	f9 01       	movw	r30, r18
    177e:	21 81       	ldd	r18, Z+1	; 0x01
    1780:	24 2b       	or	r18, r20
    1782:	fc 01       	movw	r30, r24
    1784:	20 83       	st	Z, r18
    1786:	89 e5       	ldi	r24, 0x59	; 89
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	29 e5       	ldi	r18, 0x59	; 89
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	f9 01       	movw	r30, r18
    1790:	40 81       	ld	r20, Z
    1792:	2a 81       	ldd	r18, Y+2	; 0x02
    1794:	3b 81       	ldd	r19, Y+3	; 0x03
    1796:	f9 01       	movw	r30, r18
    1798:	26 81       	ldd	r18, Z+6	; 0x06
    179a:	24 2b       	or	r18, r20
    179c:	fc 01       	movw	r30, r24
    179e:	20 83       	st	Z, r18
    17a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <Gv_PrescallerTimer0_Mask>
    17a4:	88 2f       	mov	r24, r24
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	82 30       	cpi	r24, 0x02	; 2
    17aa:	91 05       	cpc	r25, r1
    17ac:	e9 f0       	breq	.+58     	; 0x17e8 <Timers_Init+0xce>
    17ae:	83 30       	cpi	r24, 0x03	; 3
    17b0:	91 05       	cpc	r25, r1
    17b2:	2c f4       	brge	.+10     	; 0x17be <Timers_Init+0xa4>
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	61 f0       	breq	.+24     	; 0x17d0 <Timers_Init+0xb6>
    17b8:	01 97       	sbiw	r24, 0x01	; 1
    17ba:	79 f0       	breq	.+30     	; 0x17da <Timers_Init+0xc0>
    17bc:	31 c0       	rjmp	.+98     	; 0x1820 <Timers_Init+0x106>
    17be:	84 30       	cpi	r24, 0x04	; 4
    17c0:	91 05       	cpc	r25, r1
    17c2:	01 f1       	breq	.+64     	; 0x1804 <Timers_Init+0xea>
    17c4:	84 30       	cpi	r24, 0x04	; 4
    17c6:	91 05       	cpc	r25, r1
    17c8:	b4 f0       	brlt	.+44     	; 0x17f6 <Timers_Init+0xdc>
    17ca:	05 97       	sbiw	r24, 0x05	; 5
    17cc:	11 f1       	breq	.+68     	; 0x1812 <Timers_Init+0xf8>
    17ce:	28 c0       	rjmp	.+80     	; 0x1820 <Timers_Init+0x106>
    17d0:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <Gv_PrescallerTimer0_AbsoluteValue+0x1>
    17d4:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <Gv_PrescallerTimer0_AbsoluteValue>
    17d8:	23 c0       	rjmp	.+70     	; 0x1820 <Timers_Init+0x106>
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <Gv_PrescallerTimer0_AbsoluteValue+0x1>
    17e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <Gv_PrescallerTimer0_AbsoluteValue>
    17e6:	1c c0       	rjmp	.+56     	; 0x1820 <Timers_Init+0x106>
    17e8:	88 e0       	ldi	r24, 0x08	; 8
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <Gv_PrescallerTimer0_AbsoluteValue+0x1>
    17f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <Gv_PrescallerTimer0_AbsoluteValue>
    17f4:	15 c0       	rjmp	.+42     	; 0x1820 <Timers_Init+0x106>
    17f6:	80 e4       	ldi	r24, 0x40	; 64
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <Gv_PrescallerTimer0_AbsoluteValue+0x1>
    17fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <Gv_PrescallerTimer0_AbsoluteValue>
    1802:	0e c0       	rjmp	.+28     	; 0x1820 <Timers_Init+0x106>
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	91 e0       	ldi	r25, 0x01	; 1
    1808:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <Gv_PrescallerTimer0_AbsoluteValue+0x1>
    180c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <Gv_PrescallerTimer0_AbsoluteValue>
    1810:	07 c0       	rjmp	.+14     	; 0x1820 <Timers_Init+0x106>
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	94 e0       	ldi	r25, 0x04	; 4
    1816:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <Gv_PrescallerTimer0_AbsoluteValue+0x1>
    181a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <Gv_PrescallerTimer0_AbsoluteValue>
    181e:	00 00       	nop
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	89 83       	std	Y+1, r24	; 0x01
    1824:	c9 c0       	rjmp	.+402    	; 0x19b8 <Timers_Init+0x29e>
    1826:	8f e4       	ldi	r24, 0x4F	; 79
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	2f e4       	ldi	r18, 0x4F	; 79
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	f9 01       	movw	r30, r18
    1830:	20 81       	ld	r18, Z
    1832:	42 2f       	mov	r20, r18
    1834:	2a 81       	ldd	r18, Y+2	; 0x02
    1836:	3b 81       	ldd	r19, Y+3	; 0x03
    1838:	f9 01       	movw	r30, r18
    183a:	21 81       	ldd	r18, Z+1	; 0x01
    183c:	23 70       	andi	r18, 0x03	; 3
    183e:	24 2b       	or	r18, r20
    1840:	fc 01       	movw	r30, r24
    1842:	20 83       	st	Z, r18
    1844:	8e e4       	ldi	r24, 0x4E	; 78
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	2e e4       	ldi	r18, 0x4E	; 78
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	f9 01       	movw	r30, r18
    184e:	20 81       	ld	r18, Z
    1850:	42 2f       	mov	r20, r18
    1852:	2a 81       	ldd	r18, Y+2	; 0x02
    1854:	3b 81       	ldd	r19, Y+3	; 0x03
    1856:	f9 01       	movw	r30, r18
    1858:	21 81       	ldd	r18, Z+1	; 0x01
    185a:	28 71       	andi	r18, 0x18	; 24
    185c:	24 2b       	or	r18, r20
    185e:	fc 01       	movw	r30, r24
    1860:	20 83       	st	Z, r18
    1862:	89 e5       	ldi	r24, 0x59	; 89
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	29 e5       	ldi	r18, 0x59	; 89
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	f9 01       	movw	r30, r18
    186c:	20 81       	ld	r18, Z
    186e:	24 60       	ori	r18, 0x04	; 4
    1870:	fc 01       	movw	r30, r24
    1872:	20 83       	st	Z, r18
    1874:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Gv_PrescallerTimer1_Mask>
    1878:	88 2f       	mov	r24, r24
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	82 30       	cpi	r24, 0x02	; 2
    187e:	91 05       	cpc	r25, r1
    1880:	e9 f0       	breq	.+58     	; 0x18bc <Timers_Init+0x1a2>
    1882:	83 30       	cpi	r24, 0x03	; 3
    1884:	91 05       	cpc	r25, r1
    1886:	2c f4       	brge	.+10     	; 0x1892 <Timers_Init+0x178>
    1888:	00 97       	sbiw	r24, 0x00	; 0
    188a:	61 f0       	breq	.+24     	; 0x18a4 <Timers_Init+0x18a>
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	79 f0       	breq	.+30     	; 0x18ae <Timers_Init+0x194>
    1890:	31 c0       	rjmp	.+98     	; 0x18f4 <Timers_Init+0x1da>
    1892:	84 30       	cpi	r24, 0x04	; 4
    1894:	91 05       	cpc	r25, r1
    1896:	01 f1       	breq	.+64     	; 0x18d8 <Timers_Init+0x1be>
    1898:	84 30       	cpi	r24, 0x04	; 4
    189a:	91 05       	cpc	r25, r1
    189c:	b4 f0       	brlt	.+44     	; 0x18ca <Timers_Init+0x1b0>
    189e:	05 97       	sbiw	r24, 0x05	; 5
    18a0:	11 f1       	breq	.+68     	; 0x18e6 <Timers_Init+0x1cc>
    18a2:	28 c0       	rjmp	.+80     	; 0x18f4 <Timers_Init+0x1da>
    18a4:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <Gv_PrescallerTimer1_AbsoluteValue+0x1>
    18a8:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <Gv_PrescallerTimer1_AbsoluteValue>
    18ac:	23 c0       	rjmp	.+70     	; 0x18f4 <Timers_Init+0x1da>
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <Gv_PrescallerTimer1_AbsoluteValue+0x1>
    18b6:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <Gv_PrescallerTimer1_AbsoluteValue>
    18ba:	1c c0       	rjmp	.+56     	; 0x18f4 <Timers_Init+0x1da>
    18bc:	88 e0       	ldi	r24, 0x08	; 8
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <Gv_PrescallerTimer1_AbsoluteValue+0x1>
    18c4:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <Gv_PrescallerTimer1_AbsoluteValue>
    18c8:	15 c0       	rjmp	.+42     	; 0x18f4 <Timers_Init+0x1da>
    18ca:	80 e4       	ldi	r24, 0x40	; 64
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <Gv_PrescallerTimer1_AbsoluteValue+0x1>
    18d2:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <Gv_PrescallerTimer1_AbsoluteValue>
    18d6:	0e c0       	rjmp	.+28     	; 0x18f4 <Timers_Init+0x1da>
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	91 e0       	ldi	r25, 0x01	; 1
    18dc:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <Gv_PrescallerTimer1_AbsoluteValue+0x1>
    18e0:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <Gv_PrescallerTimer1_AbsoluteValue>
    18e4:	07 c0       	rjmp	.+14     	; 0x18f4 <Timers_Init+0x1da>
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	94 e0       	ldi	r25, 0x04	; 4
    18ea:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <Gv_PrescallerTimer1_AbsoluteValue+0x1>
    18ee:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <Gv_PrescallerTimer1_AbsoluteValue>
    18f2:	00 00       	nop
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	89 83       	std	Y+1, r24	; 0x01
    18f8:	5f c0       	rjmp	.+190    	; 0x19b8 <Timers_Init+0x29e>
    18fa:	85 e4       	ldi	r24, 0x45	; 69
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	25 e4       	ldi	r18, 0x45	; 69
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	f9 01       	movw	r30, r18
    1904:	40 81       	ld	r20, Z
    1906:	2a 81       	ldd	r18, Y+2	; 0x02
    1908:	3b 81       	ldd	r19, Y+3	; 0x03
    190a:	f9 01       	movw	r30, r18
    190c:	21 81       	ldd	r18, Z+1	; 0x01
    190e:	24 2b       	or	r18, r20
    1910:	fc 01       	movw	r30, r24
    1912:	20 83       	st	Z, r18
    1914:	89 e5       	ldi	r24, 0x59	; 89
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	29 e5       	ldi	r18, 0x59	; 89
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	f9 01       	movw	r30, r18
    191e:	40 81       	ld	r20, Z
    1920:	2a 81       	ldd	r18, Y+2	; 0x02
    1922:	3b 81       	ldd	r19, Y+3	; 0x03
    1924:	f9 01       	movw	r30, r18
    1926:	26 81       	ldd	r18, Z+6	; 0x06
    1928:	24 2b       	or	r18, r20
    192a:	fc 01       	movw	r30, r24
    192c:	20 83       	st	Z, r18
    192e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Gv_PrescallerTimer2_Mask>
    1932:	88 2f       	mov	r24, r24
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	82 30       	cpi	r24, 0x02	; 2
    1938:	91 05       	cpc	r25, r1
    193a:	e9 f0       	breq	.+58     	; 0x1976 <Timers_Init+0x25c>
    193c:	83 30       	cpi	r24, 0x03	; 3
    193e:	91 05       	cpc	r25, r1
    1940:	2c f4       	brge	.+10     	; 0x194c <Timers_Init+0x232>
    1942:	00 97       	sbiw	r24, 0x00	; 0
    1944:	61 f0       	breq	.+24     	; 0x195e <Timers_Init+0x244>
    1946:	01 97       	sbiw	r24, 0x01	; 1
    1948:	79 f0       	breq	.+30     	; 0x1968 <Timers_Init+0x24e>
    194a:	31 c0       	rjmp	.+98     	; 0x19ae <Timers_Init+0x294>
    194c:	86 30       	cpi	r24, 0x06	; 6
    194e:	91 05       	cpc	r25, r1
    1950:	01 f1       	breq	.+64     	; 0x1992 <Timers_Init+0x278>
    1952:	87 30       	cpi	r24, 0x07	; 7
    1954:	91 05       	cpc	r25, r1
    1956:	21 f1       	breq	.+72     	; 0x19a0 <Timers_Init+0x286>
    1958:	04 97       	sbiw	r24, 0x04	; 4
    195a:	a1 f0       	breq	.+40     	; 0x1984 <Timers_Init+0x26a>
    195c:	28 c0       	rjmp	.+80     	; 0x19ae <Timers_Init+0x294>
    195e:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <Gv_PrescallerTimer2_AbsoluteValue+0x1>
    1962:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <Gv_PrescallerTimer2_AbsoluteValue>
    1966:	23 c0       	rjmp	.+70     	; 0x19ae <Timers_Init+0x294>
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <Gv_PrescallerTimer2_AbsoluteValue+0x1>
    1970:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <Gv_PrescallerTimer2_AbsoluteValue>
    1974:	1c c0       	rjmp	.+56     	; 0x19ae <Timers_Init+0x294>
    1976:	88 e0       	ldi	r24, 0x08	; 8
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <Gv_PrescallerTimer2_AbsoluteValue+0x1>
    197e:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <Gv_PrescallerTimer2_AbsoluteValue>
    1982:	15 c0       	rjmp	.+42     	; 0x19ae <Timers_Init+0x294>
    1984:	80 e4       	ldi	r24, 0x40	; 64
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <Gv_PrescallerTimer2_AbsoluteValue+0x1>
    198c:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <Gv_PrescallerTimer2_AbsoluteValue>
    1990:	0e c0       	rjmp	.+28     	; 0x19ae <Timers_Init+0x294>
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	91 e0       	ldi	r25, 0x01	; 1
    1996:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <Gv_PrescallerTimer2_AbsoluteValue+0x1>
    199a:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <Gv_PrescallerTimer2_AbsoluteValue>
    199e:	07 c0       	rjmp	.+14     	; 0x19ae <Timers_Init+0x294>
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	94 e0       	ldi	r25, 0x04	; 4
    19a4:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <Gv_PrescallerTimer2_AbsoluteValue+0x1>
    19a8:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <Gv_PrescallerTimer2_AbsoluteValue>
    19ac:	00 00       	nop
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	89 83       	std	Y+1, r24	; 0x01
    19b2:	02 c0       	rjmp	.+4      	; 0x19b8 <Timers_Init+0x29e>
    19b4:	19 82       	std	Y+1, r1	; 0x01
    19b6:	00 00       	nop
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	df 91       	pop	r29
    19c2:	cf 91       	pop	r28
    19c4:	08 95       	ret

000019c6 <Timers_SetCounter>:
    19c6:	ef 92       	push	r14
    19c8:	ff 92       	push	r15
    19ca:	0f 93       	push	r16
    19cc:	1f 93       	push	r17
    19ce:	cf 93       	push	r28
    19d0:	df 93       	push	r29
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	2d 97       	sbiw	r28, 0x0d	; 13
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	de bf       	out	0x3e, r29	; 62
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	cd bf       	out	0x3d, r28	; 61
    19e2:	89 87       	std	Y+9, r24	; 0x09
    19e4:	4a 87       	std	Y+10, r20	; 0x0a
    19e6:	5b 87       	std	Y+11, r21	; 0x0b
    19e8:	6c 87       	std	Y+12, r22	; 0x0c
    19ea:	7d 87       	std	Y+13, r23	; 0x0d
    19ec:	19 82       	std	Y+1, r1	; 0x01
    19ee:	1a 82       	std	Y+2, r1	; 0x02
    19f0:	1b 82       	std	Y+3, r1	; 0x03
    19f2:	1c 82       	std	Y+4, r1	; 0x04
    19f4:	89 85       	ldd	r24, Y+9	; 0x09
    19f6:	88 2f       	mov	r24, r24
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	81 30       	cpi	r24, 0x01	; 1
    19fc:	91 05       	cpc	r25, r1
    19fe:	09 f4       	brne	.+2      	; 0x1a02 <Timers_SetCounter+0x3c>
    1a00:	71 c0       	rjmp	.+226    	; 0x1ae4 <Timers_SetCounter+0x11e>
    1a02:	82 30       	cpi	r24, 0x02	; 2
    1a04:	91 05       	cpc	r25, r1
    1a06:	09 f4       	brne	.+2      	; 0x1a0a <Timers_SetCounter+0x44>
    1a08:	e6 c0       	rjmp	.+460    	; 0x1bd6 <Timers_SetCounter+0x210>
    1a0a:	89 2b       	or	r24, r25
    1a0c:	09 f0       	breq	.+2      	; 0x1a10 <Timers_SetCounter+0x4a>
    1a0e:	4d c1       	rjmp	.+666    	; 0x1caa <Timers_SetCounter+0x2e4>
    1a10:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <Gv_PrescallerTimer0_AbsoluteValue>
    1a14:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <Gv_PrescallerTimer0_AbsoluteValue+0x1>
    1a18:	cc 01       	movw	r24, r24
    1a1a:	a0 e0       	ldi	r26, 0x00	; 0
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	9c 01       	movw	r18, r24
    1a20:	ad 01       	movw	r20, r26
    1a22:	60 e4       	ldi	r22, 0x40	; 64
    1a24:	72 e4       	ldi	r23, 0x42	; 66
    1a26:	8f e0       	ldi	r24, 0x0F	; 15
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	0e 94 15 11 	call	0x222a	; 0x222a <__mulsi3>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	20 91 af 00 	lds	r18, 0x00AF	; 0x8000af <Gv_F_CPU>
    1a36:	30 91 b0 00 	lds	r19, 0x00B0	; 0x8000b0 <Gv_F_CPU+0x1>
    1a3a:	40 91 b1 00 	lds	r20, 0x00B1	; 0x8000b1 <Gv_F_CPU+0x2>
    1a3e:	50 91 b2 00 	lds	r21, 0x00B2	; 0x8000b2 <Gv_F_CPU+0x3>
    1a42:	bc 01       	movw	r22, r24
    1a44:	cd 01       	movw	r24, r26
    1a46:	0e 94 4d 11 	call	0x229a	; 0x229a <__udivmodsi4>
    1a4a:	da 01       	movw	r26, r20
    1a4c:	c9 01       	movw	r24, r18
    1a4e:	9c 01       	movw	r18, r24
    1a50:	ad 01       	movw	r20, r26
    1a52:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a54:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a56:	ac 85       	ldd	r26, Y+12	; 0x0c
    1a58:	bd 85       	ldd	r27, Y+13	; 0x0d
    1a5a:	bc 01       	movw	r22, r24
    1a5c:	cd 01       	movw	r24, r26
    1a5e:	0e 94 4d 11 	call	0x229a	; 0x229a <__udivmodsi4>
    1a62:	da 01       	movw	r26, r20
    1a64:	c9 01       	movw	r24, r18
    1a66:	8d 83       	std	Y+5, r24	; 0x05
    1a68:	9e 83       	std	Y+6, r25	; 0x06
    1a6a:	af 83       	std	Y+7, r26	; 0x07
    1a6c:	b8 87       	std	Y+8, r27	; 0x08
    1a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a70:	9e 81       	ldd	r25, Y+6	; 0x06
    1a72:	af 81       	ldd	r26, Y+7	; 0x07
    1a74:	b8 85       	ldd	r27, Y+8	; 0x08
    1a76:	81 30       	cpi	r24, 0x01	; 1
    1a78:	91 40       	sbci	r25, 0x01	; 1
    1a7a:	a1 05       	cpc	r26, r1
    1a7c:	b1 05       	cpc	r27, r1
    1a7e:	28 f0       	brcs	.+10     	; 0x1a8a <Timers_SetCounter+0xc4>
    1a80:	19 82       	std	Y+1, r1	; 0x01
    1a82:	1a 82       	std	Y+2, r1	; 0x02
    1a84:	1b 82       	std	Y+3, r1	; 0x03
    1a86:	1c 82       	std	Y+4, r1	; 0x04
    1a88:	15 c1       	rjmp	.+554    	; 0x1cb4 <Timers_SetCounter+0x2ee>
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	31 e0       	ldi	r19, 0x01	; 1
    1a8e:	40 e0       	ldi	r20, 0x00	; 0
    1a90:	50 e0       	ldi	r21, 0x00	; 0
    1a92:	8d 81       	ldd	r24, Y+5	; 0x05
    1a94:	9e 81       	ldd	r25, Y+6	; 0x06
    1a96:	af 81       	ldd	r26, Y+7	; 0x07
    1a98:	b8 85       	ldd	r27, Y+8	; 0x08
    1a9a:	79 01       	movw	r14, r18
    1a9c:	8a 01       	movw	r16, r20
    1a9e:	e8 1a       	sub	r14, r24
    1aa0:	f9 0a       	sbc	r15, r25
    1aa2:	0a 0b       	sbc	r16, r26
    1aa4:	1b 0b       	sbc	r17, r27
    1aa6:	d8 01       	movw	r26, r16
    1aa8:	c7 01       	movw	r24, r14
    1aaa:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <Gv_Count>
    1aae:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <Gv_Count+0x1>
    1ab2:	a0 93 b5 00 	sts	0x00B5, r26	; 0x8000b5 <Gv_Count+0x2>
    1ab6:	b0 93 b6 00 	sts	0x00B6, r27	; 0x8000b6 <Gv_Count+0x3>
    1aba:	22 e5       	ldi	r18, 0x52	; 82
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <Gv_Count>
    1ac2:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <Gv_Count+0x1>
    1ac6:	a0 91 b5 00 	lds	r26, 0x00B5	; 0x8000b5 <Gv_Count+0x2>
    1aca:	b0 91 b6 00 	lds	r27, 0x00B6	; 0x8000b6 <Gv_Count+0x3>
    1ace:	f9 01       	movw	r30, r18
    1ad0:	80 83       	st	Z, r24
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	a0 e0       	ldi	r26, 0x00	; 0
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	89 83       	std	Y+1, r24	; 0x01
    1adc:	9a 83       	std	Y+2, r25	; 0x02
    1ade:	ab 83       	std	Y+3, r26	; 0x03
    1ae0:	bc 83       	std	Y+4, r27	; 0x04
    1ae2:	e8 c0       	rjmp	.+464    	; 0x1cb4 <Timers_SetCounter+0x2ee>
    1ae4:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <Gv_PrescallerTimer1_AbsoluteValue>
    1ae8:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <Gv_PrescallerTimer1_AbsoluteValue+0x1>
    1aec:	cc 01       	movw	r24, r24
    1aee:	a0 e0       	ldi	r26, 0x00	; 0
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	9c 01       	movw	r18, r24
    1af4:	ad 01       	movw	r20, r26
    1af6:	60 e4       	ldi	r22, 0x40	; 64
    1af8:	72 e4       	ldi	r23, 0x42	; 66
    1afa:	8f e0       	ldi	r24, 0x0F	; 15
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	0e 94 15 11 	call	0x222a	; 0x222a <__mulsi3>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	20 91 af 00 	lds	r18, 0x00AF	; 0x8000af <Gv_F_CPU>
    1b0a:	30 91 b0 00 	lds	r19, 0x00B0	; 0x8000b0 <Gv_F_CPU+0x1>
    1b0e:	40 91 b1 00 	lds	r20, 0x00B1	; 0x8000b1 <Gv_F_CPU+0x2>
    1b12:	50 91 b2 00 	lds	r21, 0x00B2	; 0x8000b2 <Gv_F_CPU+0x3>
    1b16:	bc 01       	movw	r22, r24
    1b18:	cd 01       	movw	r24, r26
    1b1a:	0e 94 4d 11 	call	0x229a	; 0x229a <__udivmodsi4>
    1b1e:	da 01       	movw	r26, r20
    1b20:	c9 01       	movw	r24, r18
    1b22:	9c 01       	movw	r18, r24
    1b24:	ad 01       	movw	r20, r26
    1b26:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b28:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b2a:	ac 85       	ldd	r26, Y+12	; 0x0c
    1b2c:	bd 85       	ldd	r27, Y+13	; 0x0d
    1b2e:	bc 01       	movw	r22, r24
    1b30:	cd 01       	movw	r24, r26
    1b32:	0e 94 4d 11 	call	0x229a	; 0x229a <__udivmodsi4>
    1b36:	da 01       	movw	r26, r20
    1b38:	c9 01       	movw	r24, r18
    1b3a:	8d 83       	std	Y+5, r24	; 0x05
    1b3c:	9e 83       	std	Y+6, r25	; 0x06
    1b3e:	af 83       	std	Y+7, r26	; 0x07
    1b40:	b8 87       	std	Y+8, r27	; 0x08
    1b42:	8d 81       	ldd	r24, Y+5	; 0x05
    1b44:	9e 81       	ldd	r25, Y+6	; 0x06
    1b46:	af 81       	ldd	r26, Y+7	; 0x07
    1b48:	b8 85       	ldd	r27, Y+8	; 0x08
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	a1 40       	sbci	r26, 0x01	; 1
    1b4e:	b1 05       	cpc	r27, r1
    1b50:	28 f0       	brcs	.+10     	; 0x1b5c <Timers_SetCounter+0x196>
    1b52:	19 82       	std	Y+1, r1	; 0x01
    1b54:	1a 82       	std	Y+2, r1	; 0x02
    1b56:	1b 82       	std	Y+3, r1	; 0x03
    1b58:	1c 82       	std	Y+4, r1	; 0x04
    1b5a:	ac c0       	rjmp	.+344    	; 0x1cb4 <Timers_SetCounter+0x2ee>
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	41 e0       	ldi	r20, 0x01	; 1
    1b62:	50 e0       	ldi	r21, 0x00	; 0
    1b64:	8d 81       	ldd	r24, Y+5	; 0x05
    1b66:	9e 81       	ldd	r25, Y+6	; 0x06
    1b68:	af 81       	ldd	r26, Y+7	; 0x07
    1b6a:	b8 85       	ldd	r27, Y+8	; 0x08
    1b6c:	79 01       	movw	r14, r18
    1b6e:	8a 01       	movw	r16, r20
    1b70:	e8 1a       	sub	r14, r24
    1b72:	f9 0a       	sbc	r15, r25
    1b74:	0a 0b       	sbc	r16, r26
    1b76:	1b 0b       	sbc	r17, r27
    1b78:	d8 01       	movw	r26, r16
    1b7a:	c7 01       	movw	r24, r14
    1b7c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <Gv_Count>
    1b80:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <Gv_Count+0x1>
    1b84:	a0 93 b5 00 	sts	0x00B5, r26	; 0x8000b5 <Gv_Count+0x2>
    1b88:	b0 93 b6 00 	sts	0x00B6, r27	; 0x8000b6 <Gv_Count+0x3>
    1b8c:	2d e4       	ldi	r18, 0x4D	; 77
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <Gv_Count>
    1b94:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <Gv_Count+0x1>
    1b98:	a0 91 b5 00 	lds	r26, 0x00B5	; 0x8000b5 <Gv_Count+0x2>
    1b9c:	b0 91 b6 00 	lds	r27, 0x00B6	; 0x8000b6 <Gv_Count+0x3>
    1ba0:	89 2f       	mov	r24, r25
    1ba2:	9a 2f       	mov	r25, r26
    1ba4:	ab 2f       	mov	r26, r27
    1ba6:	bb 27       	eor	r27, r27
    1ba8:	f9 01       	movw	r30, r18
    1baa:	80 83       	st	Z, r24
    1bac:	2c e4       	ldi	r18, 0x4C	; 76
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <Gv_Count>
    1bb4:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <Gv_Count+0x1>
    1bb8:	a0 91 b5 00 	lds	r26, 0x00B5	; 0x8000b5 <Gv_Count+0x2>
    1bbc:	b0 91 b6 00 	lds	r27, 0x00B6	; 0x8000b6 <Gv_Count+0x3>
    1bc0:	f9 01       	movw	r30, r18
    1bc2:	80 83       	st	Z, r24
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	a0 e0       	ldi	r26, 0x00	; 0
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	89 83       	std	Y+1, r24	; 0x01
    1bce:	9a 83       	std	Y+2, r25	; 0x02
    1bd0:	ab 83       	std	Y+3, r26	; 0x03
    1bd2:	bc 83       	std	Y+4, r27	; 0x04
    1bd4:	6f c0       	rjmp	.+222    	; 0x1cb4 <Timers_SetCounter+0x2ee>
    1bd6:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <Gv_PrescallerTimer2_AbsoluteValue>
    1bda:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <Gv_PrescallerTimer2_AbsoluteValue+0x1>
    1bde:	cc 01       	movw	r24, r24
    1be0:	a0 e0       	ldi	r26, 0x00	; 0
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	9c 01       	movw	r18, r24
    1be6:	ad 01       	movw	r20, r26
    1be8:	60 e4       	ldi	r22, 0x40	; 64
    1bea:	72 e4       	ldi	r23, 0x42	; 66
    1bec:	8f e0       	ldi	r24, 0x0F	; 15
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	0e 94 15 11 	call	0x222a	; 0x222a <__mulsi3>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	20 91 af 00 	lds	r18, 0x00AF	; 0x8000af <Gv_F_CPU>
    1bfc:	30 91 b0 00 	lds	r19, 0x00B0	; 0x8000b0 <Gv_F_CPU+0x1>
    1c00:	40 91 b1 00 	lds	r20, 0x00B1	; 0x8000b1 <Gv_F_CPU+0x2>
    1c04:	50 91 b2 00 	lds	r21, 0x00B2	; 0x8000b2 <Gv_F_CPU+0x3>
    1c08:	bc 01       	movw	r22, r24
    1c0a:	cd 01       	movw	r24, r26
    1c0c:	0e 94 4d 11 	call	0x229a	; 0x229a <__udivmodsi4>
    1c10:	da 01       	movw	r26, r20
    1c12:	c9 01       	movw	r24, r18
    1c14:	9c 01       	movw	r18, r24
    1c16:	ad 01       	movw	r20, r26
    1c18:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c1c:	ac 85       	ldd	r26, Y+12	; 0x0c
    1c1e:	bd 85       	ldd	r27, Y+13	; 0x0d
    1c20:	bc 01       	movw	r22, r24
    1c22:	cd 01       	movw	r24, r26
    1c24:	0e 94 4d 11 	call	0x229a	; 0x229a <__udivmodsi4>
    1c28:	da 01       	movw	r26, r20
    1c2a:	c9 01       	movw	r24, r18
    1c2c:	8d 83       	std	Y+5, r24	; 0x05
    1c2e:	9e 83       	std	Y+6, r25	; 0x06
    1c30:	af 83       	std	Y+7, r26	; 0x07
    1c32:	b8 87       	std	Y+8, r27	; 0x08
    1c34:	8d 81       	ldd	r24, Y+5	; 0x05
    1c36:	9e 81       	ldd	r25, Y+6	; 0x06
    1c38:	af 81       	ldd	r26, Y+7	; 0x07
    1c3a:	b8 85       	ldd	r27, Y+8	; 0x08
    1c3c:	81 30       	cpi	r24, 0x01	; 1
    1c3e:	91 40       	sbci	r25, 0x01	; 1
    1c40:	a1 05       	cpc	r26, r1
    1c42:	b1 05       	cpc	r27, r1
    1c44:	28 f0       	brcs	.+10     	; 0x1c50 <Timers_SetCounter+0x28a>
    1c46:	19 82       	std	Y+1, r1	; 0x01
    1c48:	1a 82       	std	Y+2, r1	; 0x02
    1c4a:	1b 82       	std	Y+3, r1	; 0x03
    1c4c:	1c 82       	std	Y+4, r1	; 0x04
    1c4e:	32 c0       	rjmp	.+100    	; 0x1cb4 <Timers_SetCounter+0x2ee>
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	31 e0       	ldi	r19, 0x01	; 1
    1c54:	40 e0       	ldi	r20, 0x00	; 0
    1c56:	50 e0       	ldi	r21, 0x00	; 0
    1c58:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5c:	af 81       	ldd	r26, Y+7	; 0x07
    1c5e:	b8 85       	ldd	r27, Y+8	; 0x08
    1c60:	79 01       	movw	r14, r18
    1c62:	8a 01       	movw	r16, r20
    1c64:	e8 1a       	sub	r14, r24
    1c66:	f9 0a       	sbc	r15, r25
    1c68:	0a 0b       	sbc	r16, r26
    1c6a:	1b 0b       	sbc	r17, r27
    1c6c:	d8 01       	movw	r26, r16
    1c6e:	c7 01       	movw	r24, r14
    1c70:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <Gv_Count>
    1c74:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <Gv_Count+0x1>
    1c78:	a0 93 b5 00 	sts	0x00B5, r26	; 0x8000b5 <Gv_Count+0x2>
    1c7c:	b0 93 b6 00 	sts	0x00B6, r27	; 0x8000b6 <Gv_Count+0x3>
    1c80:	24 e4       	ldi	r18, 0x44	; 68
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <Gv_Count>
    1c88:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <Gv_Count+0x1>
    1c8c:	a0 91 b5 00 	lds	r26, 0x00B5	; 0x8000b5 <Gv_Count+0x2>
    1c90:	b0 91 b6 00 	lds	r27, 0x00B6	; 0x8000b6 <Gv_Count+0x3>
    1c94:	f9 01       	movw	r30, r18
    1c96:	80 83       	st	Z, r24
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	a0 e0       	ldi	r26, 0x00	; 0
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	89 83       	std	Y+1, r24	; 0x01
    1ca2:	9a 83       	std	Y+2, r25	; 0x02
    1ca4:	ab 83       	std	Y+3, r26	; 0x03
    1ca6:	bc 83       	std	Y+4, r27	; 0x04
    1ca8:	05 c0       	rjmp	.+10     	; 0x1cb4 <Timers_SetCounter+0x2ee>
    1caa:	19 82       	std	Y+1, r1	; 0x01
    1cac:	1a 82       	std	Y+2, r1	; 0x02
    1cae:	1b 82       	std	Y+3, r1	; 0x03
    1cb0:	1c 82       	std	Y+4, r1	; 0x04
    1cb2:	00 00       	nop
    1cb4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cb6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cb8:	ac 85       	ldd	r26, Y+12	; 0x0c
    1cba:	bd 85       	ldd	r27, Y+13	; 0x0d
    1cbc:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <Gv_Count>
    1cc0:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <Gv_Count+0x1>
    1cc4:	a0 93 b5 00 	sts	0x00B5, r26	; 0x8000b5 <Gv_Count+0x2>
    1cc8:	b0 93 b6 00 	sts	0x00B6, r27	; 0x8000b6 <Gv_Count+0x3>
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	2d 96       	adiw	r28, 0x0d	; 13
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	f8 94       	cli
    1cd4:	de bf       	out	0x3e, r29	; 62
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	cd bf       	out	0x3d, r28	; 61
    1cda:	df 91       	pop	r29
    1cdc:	cf 91       	pop	r28
    1cde:	1f 91       	pop	r17
    1ce0:	0f 91       	pop	r16
    1ce2:	ff 90       	pop	r15
    1ce4:	ef 90       	pop	r14
    1ce6:	08 95       	ret

00001ce8 <Timers_Start>:
    1ce8:	cf 93       	push	r28
    1cea:	df 93       	push	r29
    1cec:	1f 92       	push	r1
    1cee:	cd b7       	in	r28, 0x3d	; 61
    1cf0:	de b7       	in	r29, 0x3e	; 62
    1cf2:	89 83       	std	Y+1, r24	; 0x01
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	88 2f       	mov	r24, r24
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	81 30       	cpi	r24, 0x01	; 1
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	99 f0       	breq	.+38     	; 0x1d26 <Timers_Start+0x3e>
    1d00:	82 30       	cpi	r24, 0x02	; 2
    1d02:	91 05       	cpc	r25, r1
    1d04:	e9 f0       	breq	.+58     	; 0x1d40 <Timers_Start+0x58>
    1d06:	89 2b       	or	r24, r25
    1d08:	09 f0       	breq	.+2      	; 0x1d0c <Timers_Start+0x24>
    1d0a:	27 c0       	rjmp	.+78     	; 0x1d5a <Timers_Start+0x72>
    1d0c:	83 e5       	ldi	r24, 0x53	; 83
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	23 e5       	ldi	r18, 0x53	; 83
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	f9 01       	movw	r30, r18
    1d16:	20 81       	ld	r18, Z
    1d18:	28 7f       	andi	r18, 0xF8	; 248
    1d1a:	30 91 60 00 	lds	r19, 0x0060	; 0x800060 <Gv_PrescallerTimer0_Mask>
    1d1e:	23 2b       	or	r18, r19
    1d20:	fc 01       	movw	r30, r24
    1d22:	20 83       	st	Z, r18
    1d24:	1a c0       	rjmp	.+52     	; 0x1d5a <Timers_Start+0x72>
    1d26:	8e e4       	ldi	r24, 0x4E	; 78
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	2e e4       	ldi	r18, 0x4E	; 78
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	f9 01       	movw	r30, r18
    1d30:	20 81       	ld	r18, Z
    1d32:	28 7f       	andi	r18, 0xF8	; 248
    1d34:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <Gv_PrescallerTimer1_Mask>
    1d38:	23 2b       	or	r18, r19
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	20 83       	st	Z, r18
    1d3e:	0d c0       	rjmp	.+26     	; 0x1d5a <Timers_Start+0x72>
    1d40:	85 e4       	ldi	r24, 0x45	; 69
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	25 e4       	ldi	r18, 0x45	; 69
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	f9 01       	movw	r30, r18
    1d4a:	20 81       	ld	r18, Z
    1d4c:	28 7f       	andi	r18, 0xF8	; 248
    1d4e:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <Gv_PrescallerTimer2_Mask>
    1d52:	23 2b       	or	r18, r19
    1d54:	fc 01       	movw	r30, r24
    1d56:	20 83       	st	Z, r18
    1d58:	00 00       	nop
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	0f 90       	pop	r0
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	08 95       	ret

00001d64 <Timers_timer0_Set>:
    1d64:	cf 93       	push	r28
    1d66:	df 93       	push	r29
    1d68:	1f 92       	push	r1
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
    1d6e:	89 83       	std	Y+1, r24	; 0x01
    1d70:	82 e5       	ldi	r24, 0x52	; 82
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	29 81       	ldd	r18, Y+1	; 0x01
    1d76:	fc 01       	movw	r30, r24
    1d78:	20 83       	st	Z, r18
    1d7a:	00 00       	nop
    1d7c:	0f 90       	pop	r0
    1d7e:	df 91       	pop	r29
    1d80:	cf 91       	pop	r28
    1d82:	08 95       	ret

00001d84 <Timers_timer0_Read>:
    1d84:	cf 93       	push	r28
    1d86:	df 93       	push	r29
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    1d8c:	82 e5       	ldi	r24, 0x52	; 82
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	fc 01       	movw	r30, r24
    1d92:	80 81       	ld	r24, Z
    1d94:	df 91       	pop	r29
    1d96:	cf 91       	pop	r28
    1d98:	08 95       	ret

00001d9a <Timers_timer0_Start>:
    1d9a:	cf 93       	push	r28
    1d9c:	df 93       	push	r29
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
    1da2:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <Gv_PrescallerTimer0_Mask>
    1da6:	83 e5       	ldi	r24, 0x53	; 83
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	23 e5       	ldi	r18, 0x53	; 83
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	f9 01       	movw	r30, r18
    1db0:	20 81       	ld	r18, Z
    1db2:	24 2b       	or	r18, r20
    1db4:	fc 01       	movw	r30, r24
    1db6:	20 83       	st	Z, r18
    1db8:	00 00       	nop
    1dba:	df 91       	pop	r29
    1dbc:	cf 91       	pop	r28
    1dbe:	08 95       	ret

00001dc0 <Timers_SetCallBack>:
 * Function : Timers_SetCallBack
 * Description: This function is used to set the Call Back Function in the Timer
 * @return void
 */
void Timers_SetCallBack(v_PtrFunc_v_type FuncName)
{
    1dc0:	cf 93       	push	r28
    1dc2:	df 93       	push	r29
    1dc4:	00 d0       	rcall	.+0      	; 0x1dc6 <Timers_SetCallBack+0x6>
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    1dca:	9a 83       	std	Y+2, r25	; 0x02
    1dcc:	89 83       	std	Y+1, r24	; 0x01
	gPtrCallBk = FuncName;
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd2:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <gPtrCallBk+0x1>
    1dd6:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <gPtrCallBk>
}
    1dda:	00 00       	nop
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	df 91       	pop	r29
    1de2:	cf 91       	pop	r28
    1de4:	08 95       	ret

00001de6 <__vector_9>:


ISR_T(TIMER1_OVF_vect)
{
    1de6:	1f 92       	push	r1
    1de8:	0f 92       	push	r0
    1dea:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1dee:	0f 92       	push	r0
    1df0:	11 24       	eor	r1, r1
    1df2:	2f 93       	push	r18
    1df4:	3f 93       	push	r19
    1df6:	4f 93       	push	r20
    1df8:	5f 93       	push	r21
    1dfa:	6f 93       	push	r22
    1dfc:	7f 93       	push	r23
    1dfe:	8f 93       	push	r24
    1e00:	9f 93       	push	r25
    1e02:	af 93       	push	r26
    1e04:	bf 93       	push	r27
    1e06:	ef 93       	push	r30
    1e08:	ff 93       	push	r31
    1e0a:	cf 93       	push	r28
    1e0c:	df 93       	push	r29
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
	if(gPtrCallBk != NULL)
    1e12:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <gPtrCallBk>
    1e16:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <gPtrCallBk+0x1>
    1e1a:	89 2b       	or	r24, r25
    1e1c:	31 f0       	breq	.+12     	; 0x1e2a <__vector_9+0x44>
	{
		gPtrCallBk();
    1e1e:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <gPtrCallBk>
    1e22:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <gPtrCallBk+0x1>
    1e26:	fc 01       	movw	r30, r24
    1e28:	09 95       	icall
	}
	else
	{
		// Do Nothing	
	}
	Timers_SetCounter(TIMER1,Gv_Count);
    1e2a:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <Gv_Count>
    1e2e:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <Gv_Count+0x1>
    1e32:	a0 91 b5 00 	lds	r26, 0x00B5	; 0x8000b5 <Gv_Count+0x2>
    1e36:	b0 91 b6 00 	lds	r27, 0x00B6	; 0x8000b6 <Gv_Count+0x3>
    1e3a:	ac 01       	movw	r20, r24
    1e3c:	bd 01       	movw	r22, r26
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <Timers_SetCounter>
    1e44:	00 00       	nop
    1e46:	df 91       	pop	r29
    1e48:	cf 91       	pop	r28
    1e4a:	ff 91       	pop	r31
    1e4c:	ef 91       	pop	r30
    1e4e:	bf 91       	pop	r27
    1e50:	af 91       	pop	r26
    1e52:	9f 91       	pop	r25
    1e54:	8f 91       	pop	r24
    1e56:	7f 91       	pop	r23
    1e58:	6f 91       	pop	r22
    1e5a:	5f 91       	pop	r21
    1e5c:	4f 91       	pop	r20
    1e5e:	3f 91       	pop	r19
    1e60:	2f 91       	pop	r18
    1e62:	0f 90       	pop	r0
    1e64:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1e68:	0f 90       	pop	r0
    1e6a:	1f 90       	pop	r1
    1e6c:	18 95       	reti

00001e6e <SwDelay_us>:
/**
 * Description: Function to make a software Delay in the Micro Seconds. 
 * @param NoOfMicroeSeconds the number of Micro Seconds to delay
 */
void SwDelay_us(uint32 NoOfMicroeSeconds)
{
    1e6e:	cf 93       	push	r28
    1e70:	df 93       	push	r29
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
    1e76:	28 97       	sbiw	r28, 0x08	; 8
    1e78:	0f b6       	in	r0, 0x3f	; 63
    1e7a:	f8 94       	cli
    1e7c:	de bf       	out	0x3e, r29	; 62
    1e7e:	0f be       	out	0x3f, r0	; 63
    1e80:	cd bf       	out	0x3d, r28	; 61
    1e82:	6d 83       	std	Y+5, r22	; 0x05
    1e84:	7e 83       	std	Y+6, r23	; 0x06
    1e86:	8f 83       	std	Y+7, r24	; 0x07
    1e88:	98 87       	std	Y+8, r25	; 0x08
	sint32 counter;
	counter = NoOfMicroeSeconds * (F_CPU / SECONDS_TO_MICROSECONSD_FACTOR);
    1e8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8e:	af 81       	ldd	r26, Y+7	; 0x07
    1e90:	b8 85       	ldd	r27, Y+8	; 0x08
    1e92:	88 0f       	add	r24, r24
    1e94:	99 1f       	adc	r25, r25
    1e96:	aa 1f       	adc	r26, r26
    1e98:	bb 1f       	adc	r27, r27
    1e9a:	88 0f       	add	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	aa 1f       	adc	r26, r26
    1ea0:	bb 1f       	adc	r27, r27
    1ea2:	88 0f       	add	r24, r24
    1ea4:	99 1f       	adc	r25, r25
    1ea6:	aa 1f       	adc	r26, r26
    1ea8:	bb 1f       	adc	r27, r27
    1eaa:	89 83       	std	Y+1, r24	; 0x01
    1eac:	9a 83       	std	Y+2, r25	; 0x02
    1eae:	ab 83       	std	Y+3, r26	; 0x03
    1eb0:	bc 83       	std	Y+4, r27	; 0x04
	while(counter > FALSE)
    1eb2:	0b c0       	rjmp	.+22     	; 0x1eca <SwDelay_us+0x5c>
	{
			counter =  counter - CYCLE_MICRO_DELAY_FACTOR;
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb8:	ab 81       	ldd	r26, Y+3	; 0x03
    1eba:	bc 81       	ldd	r27, Y+4	; 0x04
    1ebc:	0d 97       	sbiw	r24, 0x0d	; 13
    1ebe:	a1 09       	sbc	r26, r1
    1ec0:	b1 09       	sbc	r27, r1
    1ec2:	89 83       	std	Y+1, r24	; 0x01
    1ec4:	9a 83       	std	Y+2, r25	; 0x02
    1ec6:	ab 83       	std	Y+3, r26	; 0x03
    1ec8:	bc 83       	std	Y+4, r27	; 0x04
 */
void SwDelay_us(uint32 NoOfMicroeSeconds)
{
	sint32 counter;
	counter = NoOfMicroeSeconds * (F_CPU / SECONDS_TO_MICROSECONSD_FACTOR);
	while(counter > FALSE)
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ece:	ab 81       	ldd	r26, Y+3	; 0x03
    1ed0:	bc 81       	ldd	r27, Y+4	; 0x04
    1ed2:	18 16       	cp	r1, r24
    1ed4:	19 06       	cpc	r1, r25
    1ed6:	1a 06       	cpc	r1, r26
    1ed8:	1b 06       	cpc	r1, r27
    1eda:	64 f3       	brlt	.-40     	; 0x1eb4 <SwDelay_us+0x46>
	{
			counter =  counter - CYCLE_MICRO_DELAY_FACTOR;
	}
    1edc:	00 00       	nop
    1ede:	28 96       	adiw	r28, 0x08	; 8
    1ee0:	0f b6       	in	r0, 0x3f	; 63
    1ee2:	f8 94       	cli
    1ee4:	de bf       	out	0x3e, r29	; 62
    1ee6:	0f be       	out	0x3f, r0	; 63
    1ee8:	cd bf       	out	0x3d, r28	; 61
    1eea:	df 91       	pop	r29
    1eec:	cf 91       	pop	r28
    1eee:	08 95       	ret

00001ef0 <__divsf3>:
    1ef0:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__divsf3x>
    1ef4:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <__fp_round>
    1ef8:	0e 94 67 10 	call	0x20ce	; 0x20ce <__fp_pscB>
    1efc:	58 f0       	brcs	.+22     	; 0x1f14 <__divsf3+0x24>
    1efe:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__fp_pscA>
    1f02:	40 f0       	brcs	.+16     	; 0x1f14 <__divsf3+0x24>
    1f04:	29 f4       	brne	.+10     	; 0x1f10 <__divsf3+0x20>
    1f06:	5f 3f       	cpi	r21, 0xFF	; 255
    1f08:	29 f0       	breq	.+10     	; 0x1f14 <__divsf3+0x24>
    1f0a:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__fp_inf>
    1f0e:	51 11       	cpse	r21, r1
    1f10:	0c 94 a2 10 	jmp	0x2144	; 0x2144 <__fp_szero>
    1f14:	0c 94 5d 10 	jmp	0x20ba	; 0x20ba <__fp_nan>

00001f18 <__divsf3x>:
    1f18:	0e 94 7f 10 	call	0x20fe	; 0x20fe <__fp_split3>
    1f1c:	68 f3       	brcs	.-38     	; 0x1ef8 <__divsf3+0x8>

00001f1e <__divsf3_pse>:
    1f1e:	99 23       	and	r25, r25
    1f20:	b1 f3       	breq	.-20     	; 0x1f0e <__divsf3+0x1e>
    1f22:	55 23       	and	r21, r21
    1f24:	91 f3       	breq	.-28     	; 0x1f0a <__divsf3+0x1a>
    1f26:	95 1b       	sub	r25, r21
    1f28:	55 0b       	sbc	r21, r21
    1f2a:	bb 27       	eor	r27, r27
    1f2c:	aa 27       	eor	r26, r26
    1f2e:	62 17       	cp	r22, r18
    1f30:	73 07       	cpc	r23, r19
    1f32:	84 07       	cpc	r24, r20
    1f34:	38 f0       	brcs	.+14     	; 0x1f44 <__divsf3_pse+0x26>
    1f36:	9f 5f       	subi	r25, 0xFF	; 255
    1f38:	5f 4f       	sbci	r21, 0xFF	; 255
    1f3a:	22 0f       	add	r18, r18
    1f3c:	33 1f       	adc	r19, r19
    1f3e:	44 1f       	adc	r20, r20
    1f40:	aa 1f       	adc	r26, r26
    1f42:	a9 f3       	breq	.-22     	; 0x1f2e <__divsf3_pse+0x10>
    1f44:	35 d0       	rcall	.+106    	; 0x1fb0 <__divsf3_pse+0x92>
    1f46:	0e 2e       	mov	r0, r30
    1f48:	3a f0       	brmi	.+14     	; 0x1f58 <__divsf3_pse+0x3a>
    1f4a:	e0 e8       	ldi	r30, 0x80	; 128
    1f4c:	32 d0       	rcall	.+100    	; 0x1fb2 <__divsf3_pse+0x94>
    1f4e:	91 50       	subi	r25, 0x01	; 1
    1f50:	50 40       	sbci	r21, 0x00	; 0
    1f52:	e6 95       	lsr	r30
    1f54:	00 1c       	adc	r0, r0
    1f56:	ca f7       	brpl	.-14     	; 0x1f4a <__divsf3_pse+0x2c>
    1f58:	2b d0       	rcall	.+86     	; 0x1fb0 <__divsf3_pse+0x92>
    1f5a:	fe 2f       	mov	r31, r30
    1f5c:	29 d0       	rcall	.+82     	; 0x1fb0 <__divsf3_pse+0x92>
    1f5e:	66 0f       	add	r22, r22
    1f60:	77 1f       	adc	r23, r23
    1f62:	88 1f       	adc	r24, r24
    1f64:	bb 1f       	adc	r27, r27
    1f66:	26 17       	cp	r18, r22
    1f68:	37 07       	cpc	r19, r23
    1f6a:	48 07       	cpc	r20, r24
    1f6c:	ab 07       	cpc	r26, r27
    1f6e:	b0 e8       	ldi	r27, 0x80	; 128
    1f70:	09 f0       	breq	.+2      	; 0x1f74 <__divsf3_pse+0x56>
    1f72:	bb 0b       	sbc	r27, r27
    1f74:	80 2d       	mov	r24, r0
    1f76:	bf 01       	movw	r22, r30
    1f78:	ff 27       	eor	r31, r31
    1f7a:	93 58       	subi	r25, 0x83	; 131
    1f7c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f7e:	3a f0       	brmi	.+14     	; 0x1f8e <__divsf3_pse+0x70>
    1f80:	9e 3f       	cpi	r25, 0xFE	; 254
    1f82:	51 05       	cpc	r21, r1
    1f84:	78 f0       	brcs	.+30     	; 0x1fa4 <__divsf3_pse+0x86>
    1f86:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__fp_inf>
    1f8a:	0c 94 a2 10 	jmp	0x2144	; 0x2144 <__fp_szero>
    1f8e:	5f 3f       	cpi	r21, 0xFF	; 255
    1f90:	e4 f3       	brlt	.-8      	; 0x1f8a <__divsf3_pse+0x6c>
    1f92:	98 3e       	cpi	r25, 0xE8	; 232
    1f94:	d4 f3       	brlt	.-12     	; 0x1f8a <__divsf3_pse+0x6c>
    1f96:	86 95       	lsr	r24
    1f98:	77 95       	ror	r23
    1f9a:	67 95       	ror	r22
    1f9c:	b7 95       	ror	r27
    1f9e:	f7 95       	ror	r31
    1fa0:	9f 5f       	subi	r25, 0xFF	; 255
    1fa2:	c9 f7       	brne	.-14     	; 0x1f96 <__divsf3_pse+0x78>
    1fa4:	88 0f       	add	r24, r24
    1fa6:	91 1d       	adc	r25, r1
    1fa8:	96 95       	lsr	r25
    1faa:	87 95       	ror	r24
    1fac:	97 f9       	bld	r25, 7
    1fae:	08 95       	ret
    1fb0:	e1 e0       	ldi	r30, 0x01	; 1
    1fb2:	66 0f       	add	r22, r22
    1fb4:	77 1f       	adc	r23, r23
    1fb6:	88 1f       	adc	r24, r24
    1fb8:	bb 1f       	adc	r27, r27
    1fba:	62 17       	cp	r22, r18
    1fbc:	73 07       	cpc	r23, r19
    1fbe:	84 07       	cpc	r24, r20
    1fc0:	ba 07       	cpc	r27, r26
    1fc2:	20 f0       	brcs	.+8      	; 0x1fcc <__divsf3_pse+0xae>
    1fc4:	62 1b       	sub	r22, r18
    1fc6:	73 0b       	sbc	r23, r19
    1fc8:	84 0b       	sbc	r24, r20
    1fca:	ba 0b       	sbc	r27, r26
    1fcc:	ee 1f       	adc	r30, r30
    1fce:	88 f7       	brcc	.-30     	; 0x1fb2 <__divsf3_pse+0x94>
    1fd0:	e0 95       	com	r30
    1fd2:	08 95       	ret

00001fd4 <__fixunssfsi>:
    1fd4:	0e 94 87 10 	call	0x210e	; 0x210e <__fp_splitA>
    1fd8:	88 f0       	brcs	.+34     	; 0x1ffc <__fixunssfsi+0x28>
    1fda:	9f 57       	subi	r25, 0x7F	; 127
    1fdc:	98 f0       	brcs	.+38     	; 0x2004 <__fixunssfsi+0x30>
    1fde:	b9 2f       	mov	r27, r25
    1fe0:	99 27       	eor	r25, r25
    1fe2:	b7 51       	subi	r27, 0x17	; 23
    1fe4:	b0 f0       	brcs	.+44     	; 0x2012 <__fixunssfsi+0x3e>
    1fe6:	e1 f0       	breq	.+56     	; 0x2020 <__fixunssfsi+0x4c>
    1fe8:	66 0f       	add	r22, r22
    1fea:	77 1f       	adc	r23, r23
    1fec:	88 1f       	adc	r24, r24
    1fee:	99 1f       	adc	r25, r25
    1ff0:	1a f0       	brmi	.+6      	; 0x1ff8 <__fixunssfsi+0x24>
    1ff2:	ba 95       	dec	r27
    1ff4:	c9 f7       	brne	.-14     	; 0x1fe8 <__fixunssfsi+0x14>
    1ff6:	14 c0       	rjmp	.+40     	; 0x2020 <__fixunssfsi+0x4c>
    1ff8:	b1 30       	cpi	r27, 0x01	; 1
    1ffa:	91 f0       	breq	.+36     	; 0x2020 <__fixunssfsi+0x4c>
    1ffc:	0e 94 a1 10 	call	0x2142	; 0x2142 <__fp_zero>
    2000:	b1 e0       	ldi	r27, 0x01	; 1
    2002:	08 95       	ret
    2004:	0c 94 a1 10 	jmp	0x2142	; 0x2142 <__fp_zero>
    2008:	67 2f       	mov	r22, r23
    200a:	78 2f       	mov	r23, r24
    200c:	88 27       	eor	r24, r24
    200e:	b8 5f       	subi	r27, 0xF8	; 248
    2010:	39 f0       	breq	.+14     	; 0x2020 <__fixunssfsi+0x4c>
    2012:	b9 3f       	cpi	r27, 0xF9	; 249
    2014:	cc f3       	brlt	.-14     	; 0x2008 <__fixunssfsi+0x34>
    2016:	86 95       	lsr	r24
    2018:	77 95       	ror	r23
    201a:	67 95       	ror	r22
    201c:	b3 95       	inc	r27
    201e:	d9 f7       	brne	.-10     	; 0x2016 <__fixunssfsi+0x42>
    2020:	3e f4       	brtc	.+14     	; 0x2030 <__fixunssfsi+0x5c>
    2022:	90 95       	com	r25
    2024:	80 95       	com	r24
    2026:	70 95       	com	r23
    2028:	61 95       	neg	r22
    202a:	7f 4f       	sbci	r23, 0xFF	; 255
    202c:	8f 4f       	sbci	r24, 0xFF	; 255
    202e:	9f 4f       	sbci	r25, 0xFF	; 255
    2030:	08 95       	ret

00002032 <__floatundisf>:
    2032:	e8 94       	clt

00002034 <__fp_di2sf>:
    2034:	f9 2f       	mov	r31, r25
    2036:	96 eb       	ldi	r25, 0xB6	; 182
    2038:	ff 23       	and	r31, r31
    203a:	81 f0       	breq	.+32     	; 0x205c <__fp_di2sf+0x28>
    203c:	12 16       	cp	r1, r18
    203e:	13 06       	cpc	r1, r19
    2040:	14 06       	cpc	r1, r20
    2042:	44 0b       	sbc	r20, r20
    2044:	93 95       	inc	r25
    2046:	f6 95       	lsr	r31
    2048:	87 95       	ror	r24
    204a:	77 95       	ror	r23
    204c:	67 95       	ror	r22
    204e:	57 95       	ror	r21
    2050:	40 40       	sbci	r20, 0x00	; 0
    2052:	ff 23       	and	r31, r31
    2054:	b9 f7       	brne	.-18     	; 0x2044 <__fp_di2sf+0x10>
    2056:	1b c0       	rjmp	.+54     	; 0x208e <__fp_di2sf+0x5a>
    2058:	99 27       	eor	r25, r25
    205a:	08 95       	ret
    205c:	88 23       	and	r24, r24
    205e:	51 f4       	brne	.+20     	; 0x2074 <__fp_di2sf+0x40>
    2060:	98 50       	subi	r25, 0x08	; 8
    2062:	d2 f7       	brpl	.-12     	; 0x2058 <__fp_di2sf+0x24>
    2064:	87 2b       	or	r24, r23
    2066:	76 2f       	mov	r23, r22
    2068:	65 2f       	mov	r22, r21
    206a:	54 2f       	mov	r21, r20
    206c:	43 2f       	mov	r20, r19
    206e:	32 2f       	mov	r19, r18
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	b1 f3       	breq	.-20     	; 0x2060 <__fp_di2sf+0x2c>
    2074:	12 16       	cp	r1, r18
    2076:	13 06       	cpc	r1, r19
    2078:	14 06       	cpc	r1, r20
    207a:	44 0b       	sbc	r20, r20
    207c:	88 23       	and	r24, r24
    207e:	3a f0       	brmi	.+14     	; 0x208e <__fp_di2sf+0x5a>
    2080:	9a 95       	dec	r25
    2082:	44 0f       	add	r20, r20
    2084:	55 1f       	adc	r21, r21
    2086:	66 1f       	adc	r22, r22
    2088:	77 1f       	adc	r23, r23
    208a:	88 1f       	adc	r24, r24
    208c:	ca f7       	brpl	.-14     	; 0x2080 <__fp_di2sf+0x4c>
    208e:	55 23       	and	r21, r21
    2090:	4a f4       	brpl	.+18     	; 0x20a4 <__fp_di2sf+0x70>
    2092:	44 0f       	add	r20, r20
    2094:	55 1f       	adc	r21, r21
    2096:	11 f4       	brne	.+4      	; 0x209c <__fp_di2sf+0x68>
    2098:	60 ff       	sbrs	r22, 0
    209a:	04 c0       	rjmp	.+8      	; 0x20a4 <__fp_di2sf+0x70>
    209c:	6f 5f       	subi	r22, 0xFF	; 255
    209e:	7f 4f       	sbci	r23, 0xFF	; 255
    20a0:	8f 4f       	sbci	r24, 0xFF	; 255
    20a2:	9f 4f       	sbci	r25, 0xFF	; 255
    20a4:	88 0f       	add	r24, r24
    20a6:	96 95       	lsr	r25
    20a8:	87 95       	ror	r24
    20aa:	97 f9       	bld	r25, 7
    20ac:	08 95       	ret

000020ae <__fp_inf>:
    20ae:	97 f9       	bld	r25, 7
    20b0:	9f 67       	ori	r25, 0x7F	; 127
    20b2:	80 e8       	ldi	r24, 0x80	; 128
    20b4:	70 e0       	ldi	r23, 0x00	; 0
    20b6:	60 e0       	ldi	r22, 0x00	; 0
    20b8:	08 95       	ret

000020ba <__fp_nan>:
    20ba:	9f ef       	ldi	r25, 0xFF	; 255
    20bc:	80 ec       	ldi	r24, 0xC0	; 192
    20be:	08 95       	ret

000020c0 <__fp_pscA>:
    20c0:	00 24       	eor	r0, r0
    20c2:	0a 94       	dec	r0
    20c4:	16 16       	cp	r1, r22
    20c6:	17 06       	cpc	r1, r23
    20c8:	18 06       	cpc	r1, r24
    20ca:	09 06       	cpc	r0, r25
    20cc:	08 95       	ret

000020ce <__fp_pscB>:
    20ce:	00 24       	eor	r0, r0
    20d0:	0a 94       	dec	r0
    20d2:	12 16       	cp	r1, r18
    20d4:	13 06       	cpc	r1, r19
    20d6:	14 06       	cpc	r1, r20
    20d8:	05 06       	cpc	r0, r21
    20da:	08 95       	ret

000020dc <__fp_round>:
    20dc:	09 2e       	mov	r0, r25
    20de:	03 94       	inc	r0
    20e0:	00 0c       	add	r0, r0
    20e2:	11 f4       	brne	.+4      	; 0x20e8 <__fp_round+0xc>
    20e4:	88 23       	and	r24, r24
    20e6:	52 f0       	brmi	.+20     	; 0x20fc <__fp_round+0x20>
    20e8:	bb 0f       	add	r27, r27
    20ea:	40 f4       	brcc	.+16     	; 0x20fc <__fp_round+0x20>
    20ec:	bf 2b       	or	r27, r31
    20ee:	11 f4       	brne	.+4      	; 0x20f4 <__fp_round+0x18>
    20f0:	60 ff       	sbrs	r22, 0
    20f2:	04 c0       	rjmp	.+8      	; 0x20fc <__fp_round+0x20>
    20f4:	6f 5f       	subi	r22, 0xFF	; 255
    20f6:	7f 4f       	sbci	r23, 0xFF	; 255
    20f8:	8f 4f       	sbci	r24, 0xFF	; 255
    20fa:	9f 4f       	sbci	r25, 0xFF	; 255
    20fc:	08 95       	ret

000020fe <__fp_split3>:
    20fe:	57 fd       	sbrc	r21, 7
    2100:	90 58       	subi	r25, 0x80	; 128
    2102:	44 0f       	add	r20, r20
    2104:	55 1f       	adc	r21, r21
    2106:	59 f0       	breq	.+22     	; 0x211e <__fp_splitA+0x10>
    2108:	5f 3f       	cpi	r21, 0xFF	; 255
    210a:	71 f0       	breq	.+28     	; 0x2128 <__fp_splitA+0x1a>
    210c:	47 95       	ror	r20

0000210e <__fp_splitA>:
    210e:	88 0f       	add	r24, r24
    2110:	97 fb       	bst	r25, 7
    2112:	99 1f       	adc	r25, r25
    2114:	61 f0       	breq	.+24     	; 0x212e <__fp_splitA+0x20>
    2116:	9f 3f       	cpi	r25, 0xFF	; 255
    2118:	79 f0       	breq	.+30     	; 0x2138 <__fp_splitA+0x2a>
    211a:	87 95       	ror	r24
    211c:	08 95       	ret
    211e:	12 16       	cp	r1, r18
    2120:	13 06       	cpc	r1, r19
    2122:	14 06       	cpc	r1, r20
    2124:	55 1f       	adc	r21, r21
    2126:	f2 cf       	rjmp	.-28     	; 0x210c <__fp_split3+0xe>
    2128:	46 95       	lsr	r20
    212a:	f1 df       	rcall	.-30     	; 0x210e <__fp_splitA>
    212c:	08 c0       	rjmp	.+16     	; 0x213e <__fp_splitA+0x30>
    212e:	16 16       	cp	r1, r22
    2130:	17 06       	cpc	r1, r23
    2132:	18 06       	cpc	r1, r24
    2134:	99 1f       	adc	r25, r25
    2136:	f1 cf       	rjmp	.-30     	; 0x211a <__fp_splitA+0xc>
    2138:	86 95       	lsr	r24
    213a:	71 05       	cpc	r23, r1
    213c:	61 05       	cpc	r22, r1
    213e:	08 94       	sec
    2140:	08 95       	ret

00002142 <__fp_zero>:
    2142:	e8 94       	clt

00002144 <__fp_szero>:
    2144:	bb 27       	eor	r27, r27
    2146:	66 27       	eor	r22, r22
    2148:	77 27       	eor	r23, r23
    214a:	cb 01       	movw	r24, r22
    214c:	97 f9       	bld	r25, 7
    214e:	08 95       	ret

00002150 <__mulsf3>:
    2150:	0e 94 bb 10 	call	0x2176	; 0x2176 <__mulsf3x>
    2154:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <__fp_round>
    2158:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__fp_pscA>
    215c:	38 f0       	brcs	.+14     	; 0x216c <__mulsf3+0x1c>
    215e:	0e 94 67 10 	call	0x20ce	; 0x20ce <__fp_pscB>
    2162:	20 f0       	brcs	.+8      	; 0x216c <__mulsf3+0x1c>
    2164:	95 23       	and	r25, r21
    2166:	11 f0       	breq	.+4      	; 0x216c <__mulsf3+0x1c>
    2168:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__fp_inf>
    216c:	0c 94 5d 10 	jmp	0x20ba	; 0x20ba <__fp_nan>
    2170:	11 24       	eor	r1, r1
    2172:	0c 94 a2 10 	jmp	0x2144	; 0x2144 <__fp_szero>

00002176 <__mulsf3x>:
    2176:	0e 94 7f 10 	call	0x20fe	; 0x20fe <__fp_split3>
    217a:	70 f3       	brcs	.-36     	; 0x2158 <__mulsf3+0x8>

0000217c <__mulsf3_pse>:
    217c:	95 9f       	mul	r25, r21
    217e:	c1 f3       	breq	.-16     	; 0x2170 <__mulsf3+0x20>
    2180:	95 0f       	add	r25, r21
    2182:	50 e0       	ldi	r21, 0x00	; 0
    2184:	55 1f       	adc	r21, r21
    2186:	62 9f       	mul	r22, r18
    2188:	f0 01       	movw	r30, r0
    218a:	72 9f       	mul	r23, r18
    218c:	bb 27       	eor	r27, r27
    218e:	f0 0d       	add	r31, r0
    2190:	b1 1d       	adc	r27, r1
    2192:	63 9f       	mul	r22, r19
    2194:	aa 27       	eor	r26, r26
    2196:	f0 0d       	add	r31, r0
    2198:	b1 1d       	adc	r27, r1
    219a:	aa 1f       	adc	r26, r26
    219c:	64 9f       	mul	r22, r20
    219e:	66 27       	eor	r22, r22
    21a0:	b0 0d       	add	r27, r0
    21a2:	a1 1d       	adc	r26, r1
    21a4:	66 1f       	adc	r22, r22
    21a6:	82 9f       	mul	r24, r18
    21a8:	22 27       	eor	r18, r18
    21aa:	b0 0d       	add	r27, r0
    21ac:	a1 1d       	adc	r26, r1
    21ae:	62 1f       	adc	r22, r18
    21b0:	73 9f       	mul	r23, r19
    21b2:	b0 0d       	add	r27, r0
    21b4:	a1 1d       	adc	r26, r1
    21b6:	62 1f       	adc	r22, r18
    21b8:	83 9f       	mul	r24, r19
    21ba:	a0 0d       	add	r26, r0
    21bc:	61 1d       	adc	r22, r1
    21be:	22 1f       	adc	r18, r18
    21c0:	74 9f       	mul	r23, r20
    21c2:	33 27       	eor	r19, r19
    21c4:	a0 0d       	add	r26, r0
    21c6:	61 1d       	adc	r22, r1
    21c8:	23 1f       	adc	r18, r19
    21ca:	84 9f       	mul	r24, r20
    21cc:	60 0d       	add	r22, r0
    21ce:	21 1d       	adc	r18, r1
    21d0:	82 2f       	mov	r24, r18
    21d2:	76 2f       	mov	r23, r22
    21d4:	6a 2f       	mov	r22, r26
    21d6:	11 24       	eor	r1, r1
    21d8:	9f 57       	subi	r25, 0x7F	; 127
    21da:	50 40       	sbci	r21, 0x00	; 0
    21dc:	9a f0       	brmi	.+38     	; 0x2204 <__mulsf3_pse+0x88>
    21de:	f1 f0       	breq	.+60     	; 0x221c <__mulsf3_pse+0xa0>
    21e0:	88 23       	and	r24, r24
    21e2:	4a f0       	brmi	.+18     	; 0x21f6 <__mulsf3_pse+0x7a>
    21e4:	ee 0f       	add	r30, r30
    21e6:	ff 1f       	adc	r31, r31
    21e8:	bb 1f       	adc	r27, r27
    21ea:	66 1f       	adc	r22, r22
    21ec:	77 1f       	adc	r23, r23
    21ee:	88 1f       	adc	r24, r24
    21f0:	91 50       	subi	r25, 0x01	; 1
    21f2:	50 40       	sbci	r21, 0x00	; 0
    21f4:	a9 f7       	brne	.-22     	; 0x21e0 <__mulsf3_pse+0x64>
    21f6:	9e 3f       	cpi	r25, 0xFE	; 254
    21f8:	51 05       	cpc	r21, r1
    21fa:	80 f0       	brcs	.+32     	; 0x221c <__mulsf3_pse+0xa0>
    21fc:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__fp_inf>
    2200:	0c 94 a2 10 	jmp	0x2144	; 0x2144 <__fp_szero>
    2204:	5f 3f       	cpi	r21, 0xFF	; 255
    2206:	e4 f3       	brlt	.-8      	; 0x2200 <__mulsf3_pse+0x84>
    2208:	98 3e       	cpi	r25, 0xE8	; 232
    220a:	d4 f3       	brlt	.-12     	; 0x2200 <__mulsf3_pse+0x84>
    220c:	86 95       	lsr	r24
    220e:	77 95       	ror	r23
    2210:	67 95       	ror	r22
    2212:	b7 95       	ror	r27
    2214:	f7 95       	ror	r31
    2216:	e7 95       	ror	r30
    2218:	9f 5f       	subi	r25, 0xFF	; 255
    221a:	c1 f7       	brne	.-16     	; 0x220c <__mulsf3_pse+0x90>
    221c:	fe 2b       	or	r31, r30
    221e:	88 0f       	add	r24, r24
    2220:	91 1d       	adc	r25, r1
    2222:	96 95       	lsr	r25
    2224:	87 95       	ror	r24
    2226:	97 f9       	bld	r25, 7
    2228:	08 95       	ret

0000222a <__mulsi3>:
    222a:	db 01       	movw	r26, r22
    222c:	8f 93       	push	r24
    222e:	9f 93       	push	r25
    2230:	0e 94 6f 11 	call	0x22de	; 0x22de <__muluhisi3>
    2234:	bf 91       	pop	r27
    2236:	af 91       	pop	r26
    2238:	a2 9f       	mul	r26, r18
    223a:	80 0d       	add	r24, r0
    223c:	91 1d       	adc	r25, r1
    223e:	a3 9f       	mul	r26, r19
    2240:	90 0d       	add	r25, r0
    2242:	b2 9f       	mul	r27, r18
    2244:	90 0d       	add	r25, r0
    2246:	11 24       	eor	r1, r1
    2248:	08 95       	ret

0000224a <__udivmodhi4>:
    224a:	aa 1b       	sub	r26, r26
    224c:	bb 1b       	sub	r27, r27
    224e:	51 e1       	ldi	r21, 0x11	; 17
    2250:	07 c0       	rjmp	.+14     	; 0x2260 <__udivmodhi4_ep>

00002252 <__udivmodhi4_loop>:
    2252:	aa 1f       	adc	r26, r26
    2254:	bb 1f       	adc	r27, r27
    2256:	a6 17       	cp	r26, r22
    2258:	b7 07       	cpc	r27, r23
    225a:	10 f0       	brcs	.+4      	; 0x2260 <__udivmodhi4_ep>
    225c:	a6 1b       	sub	r26, r22
    225e:	b7 0b       	sbc	r27, r23

00002260 <__udivmodhi4_ep>:
    2260:	88 1f       	adc	r24, r24
    2262:	99 1f       	adc	r25, r25
    2264:	5a 95       	dec	r21
    2266:	a9 f7       	brne	.-22     	; 0x2252 <__udivmodhi4_loop>
    2268:	80 95       	com	r24
    226a:	90 95       	com	r25
    226c:	bc 01       	movw	r22, r24
    226e:	cd 01       	movw	r24, r26
    2270:	08 95       	ret

00002272 <__divmodhi4>:
    2272:	97 fb       	bst	r25, 7
    2274:	07 2e       	mov	r0, r23
    2276:	16 f4       	brtc	.+4      	; 0x227c <__divmodhi4+0xa>
    2278:	00 94       	com	r0
    227a:	07 d0       	rcall	.+14     	; 0x228a <__divmodhi4_neg1>
    227c:	77 fd       	sbrc	r23, 7
    227e:	09 d0       	rcall	.+18     	; 0x2292 <__divmodhi4_neg2>
    2280:	0e 94 25 11 	call	0x224a	; 0x224a <__udivmodhi4>
    2284:	07 fc       	sbrc	r0, 7
    2286:	05 d0       	rcall	.+10     	; 0x2292 <__divmodhi4_neg2>
    2288:	3e f4       	brtc	.+14     	; 0x2298 <__divmodhi4_exit>

0000228a <__divmodhi4_neg1>:
    228a:	90 95       	com	r25
    228c:	81 95       	neg	r24
    228e:	9f 4f       	sbci	r25, 0xFF	; 255
    2290:	08 95       	ret

00002292 <__divmodhi4_neg2>:
    2292:	70 95       	com	r23
    2294:	61 95       	neg	r22
    2296:	7f 4f       	sbci	r23, 0xFF	; 255

00002298 <__divmodhi4_exit>:
    2298:	08 95       	ret

0000229a <__udivmodsi4>:
    229a:	a1 e2       	ldi	r26, 0x21	; 33
    229c:	1a 2e       	mov	r1, r26
    229e:	aa 1b       	sub	r26, r26
    22a0:	bb 1b       	sub	r27, r27
    22a2:	fd 01       	movw	r30, r26
    22a4:	0d c0       	rjmp	.+26     	; 0x22c0 <__udivmodsi4_ep>

000022a6 <__udivmodsi4_loop>:
    22a6:	aa 1f       	adc	r26, r26
    22a8:	bb 1f       	adc	r27, r27
    22aa:	ee 1f       	adc	r30, r30
    22ac:	ff 1f       	adc	r31, r31
    22ae:	a2 17       	cp	r26, r18
    22b0:	b3 07       	cpc	r27, r19
    22b2:	e4 07       	cpc	r30, r20
    22b4:	f5 07       	cpc	r31, r21
    22b6:	20 f0       	brcs	.+8      	; 0x22c0 <__udivmodsi4_ep>
    22b8:	a2 1b       	sub	r26, r18
    22ba:	b3 0b       	sbc	r27, r19
    22bc:	e4 0b       	sbc	r30, r20
    22be:	f5 0b       	sbc	r31, r21

000022c0 <__udivmodsi4_ep>:
    22c0:	66 1f       	adc	r22, r22
    22c2:	77 1f       	adc	r23, r23
    22c4:	88 1f       	adc	r24, r24
    22c6:	99 1f       	adc	r25, r25
    22c8:	1a 94       	dec	r1
    22ca:	69 f7       	brne	.-38     	; 0x22a6 <__udivmodsi4_loop>
    22cc:	60 95       	com	r22
    22ce:	70 95       	com	r23
    22d0:	80 95       	com	r24
    22d2:	90 95       	com	r25
    22d4:	9b 01       	movw	r18, r22
    22d6:	ac 01       	movw	r20, r24
    22d8:	bd 01       	movw	r22, r26
    22da:	cf 01       	movw	r24, r30
    22dc:	08 95       	ret

000022de <__muluhisi3>:
    22de:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <__umulhisi3>
    22e2:	a5 9f       	mul	r26, r21
    22e4:	90 0d       	add	r25, r0
    22e6:	b4 9f       	mul	r27, r20
    22e8:	90 0d       	add	r25, r0
    22ea:	a4 9f       	mul	r26, r20
    22ec:	80 0d       	add	r24, r0
    22ee:	91 1d       	adc	r25, r1
    22f0:	11 24       	eor	r1, r1
    22f2:	08 95       	ret

000022f4 <__umulhisi3>:
    22f4:	a2 9f       	mul	r26, r18
    22f6:	b0 01       	movw	r22, r0
    22f8:	b3 9f       	mul	r27, r19
    22fa:	c0 01       	movw	r24, r0
    22fc:	a3 9f       	mul	r26, r19
    22fe:	70 0d       	add	r23, r0
    2300:	81 1d       	adc	r24, r1
    2302:	11 24       	eor	r1, r1
    2304:	91 1d       	adc	r25, r1
    2306:	b2 9f       	mul	r27, r18
    2308:	70 0d       	add	r23, r0
    230a:	81 1d       	adc	r24, r1
    230c:	11 24       	eor	r1, r1
    230e:	91 1d       	adc	r25, r1
    2310:	08 95       	ret

00002312 <itoa>:
    2312:	45 32       	cpi	r20, 0x25	; 37
    2314:	51 05       	cpc	r21, r1
    2316:	20 f4       	brcc	.+8      	; 0x2320 <itoa+0xe>
    2318:	42 30       	cpi	r20, 0x02	; 2
    231a:	10 f0       	brcs	.+4      	; 0x2320 <itoa+0xe>
    231c:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__itoa_ncheck>
    2320:	fb 01       	movw	r30, r22
    2322:	10 82       	st	Z, r1
    2324:	cb 01       	movw	r24, r22
    2326:	08 95       	ret

00002328 <__itoa_ncheck>:
    2328:	bb 27       	eor	r27, r27
    232a:	4a 30       	cpi	r20, 0x0A	; 10
    232c:	31 f4       	brne	.+12     	; 0x233a <__itoa_ncheck+0x12>
    232e:	99 23       	and	r25, r25
    2330:	22 f4       	brpl	.+8      	; 0x233a <__itoa_ncheck+0x12>
    2332:	bd e2       	ldi	r27, 0x2D	; 45
    2334:	90 95       	com	r25
    2336:	81 95       	neg	r24
    2338:	9f 4f       	sbci	r25, 0xFF	; 255
    233a:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__utoa_common>

0000233e <__utoa_ncheck>:
    233e:	bb 27       	eor	r27, r27

00002340 <__utoa_common>:
    2340:	fb 01       	movw	r30, r22
    2342:	55 27       	eor	r21, r21
    2344:	aa 27       	eor	r26, r26
    2346:	88 0f       	add	r24, r24
    2348:	99 1f       	adc	r25, r25
    234a:	aa 1f       	adc	r26, r26
    234c:	a4 17       	cp	r26, r20
    234e:	10 f0       	brcs	.+4      	; 0x2354 <__utoa_common+0x14>
    2350:	a4 1b       	sub	r26, r20
    2352:	83 95       	inc	r24
    2354:	50 51       	subi	r21, 0x10	; 16
    2356:	b9 f7       	brne	.-18     	; 0x2346 <__utoa_common+0x6>
    2358:	a0 5d       	subi	r26, 0xD0	; 208
    235a:	aa 33       	cpi	r26, 0x3A	; 58
    235c:	08 f0       	brcs	.+2      	; 0x2360 <__utoa_common+0x20>
    235e:	a9 5d       	subi	r26, 0xD9	; 217
    2360:	a1 93       	st	Z+, r26
    2362:	00 97       	sbiw	r24, 0x00	; 0
    2364:	79 f7       	brne	.-34     	; 0x2344 <__utoa_common+0x4>
    2366:	b1 11       	cpse	r27, r1
    2368:	b1 93       	st	Z+, r27
    236a:	11 92       	st	Z+, r1
    236c:	cb 01       	movw	r24, r22
    236e:	0c 94 b9 11 	jmp	0x2372	; 0x2372 <strrev>

00002372 <strrev>:
    2372:	dc 01       	movw	r26, r24
    2374:	fc 01       	movw	r30, r24
    2376:	67 2f       	mov	r22, r23
    2378:	71 91       	ld	r23, Z+
    237a:	77 23       	and	r23, r23
    237c:	e1 f7       	brne	.-8      	; 0x2376 <strrev+0x4>
    237e:	32 97       	sbiw	r30, 0x02	; 2
    2380:	04 c0       	rjmp	.+8      	; 0x238a <strrev+0x18>
    2382:	7c 91       	ld	r23, X
    2384:	6d 93       	st	X+, r22
    2386:	70 83       	st	Z, r23
    2388:	62 91       	ld	r22, -Z
    238a:	ae 17       	cp	r26, r30
    238c:	bf 07       	cpc	r27, r31
    238e:	c8 f3       	brcs	.-14     	; 0x2382 <strrev+0x10>
    2390:	08 95       	ret

00002392 <_exit>:
    2392:	f8 94       	cli

00002394 <__stop_program>:
    2394:	ff cf       	rjmp	.-2      	; 0x2394 <__stop_program>
